<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>倾听枫声</title>
  <subtitle>lex-zhao</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lex-zhao.xyz/"/>
  <updated>2017-11-20T15:35:08.187Z</updated>
  <id>http://www.lex-zhao.xyz/</id>
  
  <author>
    <name>倾听枫声</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Two Pointer总结</title>
    <link href="http://www.lex-zhao.xyz/2017/11/19/Two-Pointer%E6%80%BB%E7%BB%93/"/>
    <id>http://www.lex-zhao.xyz/2017/11/19/Two-Pointer总结/</id>
    <published>2017-11-19T06:32:47.000Z</published>
    <updated>2017-11-20T15:35:08.187Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前序&quot;&gt;&lt;a href=&quot;#前序&quot; class=&quot;headerlink&quot; title=&quot;前序&quot;&gt;&lt;/a&gt;&lt;strong&gt;前序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Two Pointer应该说之前用到的还是很多的，像一次循环找到链表的中间元素，像快排等等，刚好这两天Leetcode刷到了Two Pointer这一块，借此机会做一个总结。在大多数适合于Two Pointer的场景下，恰当地使用Two pointer可以将复杂度维持在O(N)，特别是一些求解连续子序列相关的问题，Two pointer不失为一种很好地切入点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>递归  回溯  DFS</title>
    <link href="http://www.lex-zhao.xyz/2017/11/06/%E9%80%92%E5%BD%92-%E5%9B%9E%E6%BA%AF-DFS/"/>
    <id>http://www.lex-zhao.xyz/2017/11/06/递归-回溯-DFS/</id>
    <published>2017-11-06T07:22:17.000Z</published>
    <updated>2017-11-19T06:31:28.950Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;参考&lt;a href=&quot;http://blog.csdn.net/ffmpeg4976/article/details/45007439&quot;&gt;http://blog.csdn.net/ffmpeg4976/article/details/45007439&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在程序设计中，有相当一类求一组解，或求全部解或求最优解的问题，例如读者熟悉的八皇后问题，不是根据某种特定的计算法则，而是利用试探和回溯的搜索技术求解。回溯法也是设计递归过程的一种重要方法，它的求解过程实质上是一个先序遍历一棵”状态树”的过程,只是这棵树不是遍历前预先建立的,而是隐含在遍历过程中。&lt;/p&gt;
&lt;p&gt;《数据结构》(严蔚敏)&lt;br&gt;怎么理解这段话呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="dfs" scheme="http://www.lex-zhao.xyz/tags/dfs/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Construct Binary Tree from Array</title>
    <link href="http://www.lex-zhao.xyz/2017/11/06/Construct-Binary-Tree-from-Array/"/>
    <id>http://www.lex-zhao.xyz/2017/11/06/Construct-Binary-Tree-from-Array/</id>
    <published>2017-11-06T07:16:41.000Z</published>
    <updated>2017-11-06T07:28:14.395Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;105. Construct Binary Tree from Preorder and Inorder Traversal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;106. Construct Binary Tree from Inorder and Postorder Traversal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以说是两道再经典不过的dfs题了,思路都很清晰，在这里记录一下吧&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="dfs" scheme="http://www.lex-zhao.xyz/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>动态规划问题带备忘自顶向下方法的典型应用</title>
    <link href="http://www.lex-zhao.xyz/2017/11/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E5%B8%A6%E5%A4%87%E5%BF%98%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8/"/>
    <id>http://www.lex-zhao.xyz/2017/11/05/动态规划问题带备忘自顶向下方法的典型应用/</id>
    <published>2017-11-05T06:29:22.000Z</published>
    <updated>2017-11-05T06:56:31.102Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 44. Wildcard Matching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 10. Regular Expression Matching&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105145034.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Map在动态规划问题当中的应用</title>
    <link href="http://www.lex-zhao.xyz/2017/11/05/Map%E5%9C%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E5%BD%93%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://www.lex-zhao.xyz/2017/11/05/Map在动态规划问题当中的应用/</id>
    <published>2017-11-05T06:27:59.000Z</published>
    <updated>2017-11-05T06:48:07.782Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; 140. Word Break II&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 638. Shopping Offers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105143248.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>InterleavingString</title>
    <link href="http://www.lex-zhao.xyz/2017/11/02/InterleabingString/"/>
    <id>http://www.lex-zhao.xyz/2017/11/02/InterleabingString/</id>
    <published>2017-11-02T02:19:53.000Z</published>
    <updated>2017-11-05T14:48:14.898Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;动态规划问题到目前为止已经刷了差不多40余题，借几道题稍微做一个总结。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;97. Interleaving String&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102104732.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>MinimumASCIIDeleteSum</title>
    <link href="http://www.lex-zhao.xyz/2017/11/02/MinimumASCIIDeleteSum/"/>
    <id>http://www.lex-zhao.xyz/2017/11/02/MinimumASCIIDeleteSum/</id>
    <published>2017-11-02T02:19:08.000Z</published>
    <updated>2017-11-05T14:49:09.241Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;712. Minimum ASCII Delete Sum for Two Strings&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102110943.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>CountRepetition</title>
    <link href="http://www.lex-zhao.xyz/2017/11/02/CountRepetition/"/>
    <id>http://www.lex-zhao.xyz/2017/11/02/CountRepetition/</id>
    <published>2017-11-02T02:15:40.000Z</published>
    <updated>2017-11-05T06:10:20.291Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;466. Count The Repetitions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102111759.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DP" scheme="http://www.lex-zhao.xyz/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Strange priter</title>
    <link href="http://www.lex-zhao.xyz/2017/10/19/Strange-priter/"/>
    <id>http://www.lex-zhao.xyz/2017/10/19/Strange-priter/</id>
    <published>2017-10-19T10:26:55.000Z</published>
    <updated>2017-11-05T06:09:23.824Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;664. Strange Printer&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/strangepriter.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这道题的难度感觉是很大的&lt;/strong&gt;，目前想到的方法是 &lt;strong&gt;&amp;lt;O(n^3)&lt;/strong&gt;,（其中n小于或等于字符串长度）是否存在更低时间复杂度，例如能否将某个维度降到logn级别还在进一步思考当中。&lt;br&gt;直接看代码&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Matchstickes to Square</title>
    <link href="http://www.lex-zhao.xyz/2017/09/15/Matchstickes-to-Square/"/>
    <id>http://www.lex-zhao.xyz/2017/09/15/Matchstickes-to-Square/</id>
    <published>2017-09-15T09:16:10.000Z</published>
    <updated>2017-11-05T06:12:34.747Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;473. Matchsticks to Square&lt;/strong&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Remove Invalid Parentheses</title>
    <link href="http://www.lex-zhao.xyz/2017/09/13/Remove-Invalid-Parentheses/"/>
    <id>http://www.lex-zhao.xyz/2017/09/13/Remove-Invalid-Parentheses/</id>
    <published>2017-09-13T09:48:01.000Z</published>
    <updated>2017-11-05T06:07:36.202Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;301. Remove Invalid Parentheses&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913174831.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Binary Tree Maximum Path Sum</title>
    <link href="http://www.lex-zhao.xyz/2017/09/13/Binary-Tree-Maximum-Path-Sum/"/>
    <id>http://www.lex-zhao.xyz/2017/09/13/Binary-Tree-Maximum-Path-Sum/</id>
    <published>2017-09-13T08:09:36.000Z</published>
    <updated>2017-11-05T06:14:20.698Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;124. Binary Tree Maximum Path Sum&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913161221.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这道题需要注意的地方是二叉树节点值可能为负数，因此在确定是否将左右子树最大值引入时，应该同0进行比较，同时应在每个节点处判断是否以该节点作为Sequence的根节点。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>中序遍历的应用</title>
    <link href="http://www.lex-zhao.xyz/2017/09/13/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://www.lex-zhao.xyz/2017/09/13/中序遍历的应用/</id>
    <published>2017-09-13T07:41:51.000Z</published>
    <updated>2017-11-05T06:22:03.966Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;对于二叉树，当涉及到将二叉树转化为有序数组的问题时，应该首先考虑中序遍历和后序遍历。如题：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="BST" scheme="http://www.lex-zhao.xyz/tags/BST/"/>
    
  </entry>
  
  <entry>
    <title>最小高度树</title>
    <link href="http://www.lex-zhao.xyz/2017/09/07/%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/"/>
    <id>http://www.lex-zhao.xyz/2017/09/07/最小高度树/</id>
    <published>2017-09-07T02:21:38.000Z</published>
    <updated>2017-11-05T06:21:12.249Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;310. Minimum Height Trees&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Leetcode" scheme="http://www.lex-zhao.xyz/tags/Leetcode/"/>
    
      <category term="DataStructure" scheme="http://www.lex-zhao.xyz/tags/DataStructure/"/>
    
  </entry>
  
  <entry>
    <title>opendaylightplugin学习笔记（一）——StatisticsManager</title>
    <link href="http://www.lex-zhao.xyz/2017/07/28/opendaylightplugin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94StatisticsManager-1/"/>
    <id>http://www.lex-zhao.xyz/2017/07/28/opendaylightplugin学习笔记（一）——StatisticsManager-1/</id>
    <published>2017-07-27T16:00:36.000Z</published>
    <updated>2017-07-28T00:24:47.282Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;@(Opendaylight)[openflowplugin|statistics-manager|beryllium]&lt;/p&gt;
&lt;h4 id=&quot;StatNodeRegistrationImpl&quot;&gt;&lt;a href=&quot;#StatNodeRegistrationImpl&quot; class=&quot;headerlink&quot; title=&quot;StatNodeRegistrationImpl&quot;&gt;&lt;/a&gt;StatNodeRegistrationImpl&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;StaNodeRegistrationImpl在铍版本似乎实现的是之前版本Inventory-Manager中NodeChangeCommit获取节点和端口信息的功能，也就说在铍版本，节点、端口信息获取和存储功能似乎从Inventory-mananger转移到了statistics-manager。有待于进一步证实。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SDN" scheme="http://www.lex-zhao.xyz/tags/SDN/"/>
    
      <category term="ODL" scheme="http://www.lex-zhao.xyz/tags/ODL/"/>
    
  </entry>
  
  <entry>
    <title>opendaylightplugin学习笔记（二）——TopologyManager</title>
    <link href="http://www.lex-zhao.xyz/2017/07/27/opendaylightplugin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94TopologyManager-1/"/>
    <id>http://www.lex-zhao.xyz/2017/07/27/opendaylightplugin学习笔记（二）——TopologyManager-1/</id>
    <published>2017-07-27T15:57:43.000Z</published>
    <updated>2017-07-27T15:58:50.830Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;topology-manager&lt;/strong&gt;模块是作为&lt;strong&gt;openflowplugin&lt;/strong&gt;的应用层程序（Applications），负责处理operational数据库下network-topology:network-topology数据节点（datastore数据库）的增删改查，例如ODL控制器发现添加一台主机host、新加主机与交换机的link链接等。显示拓扑的前端需要从该数据节点上获取主机或者交换机节点数据才能绘制网络拓扑图，构成拓扑图来源有两方面，一方面是通过LLDP发现的switch设备以及相关link连接，另一外面是通过L2switch的hosttracker模块发现的下挂在switch上的host主机以及相关连接。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="SDN" scheme="http://www.lex-zhao.xyz/tags/SDN/"/>
    
      <category term="ODL" scheme="http://www.lex-zhao.xyz/tags/ODL/"/>
    
  </entry>
  
  <entry>
    <title>Apriori</title>
    <link href="http://www.lex-zhao.xyz/2017/07/16/Apriori/"/>
    <id>http://www.lex-zhao.xyz/2017/07/16/Apriori/</id>
    <published>2017-07-16T08:18:55.000Z</published>
    <updated>2017-07-16T08:19:31.085Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="DataMining" scheme="http://www.lex-zhao.xyz/tags/DataMining/"/>
    
      <category term="Algorithm" scheme="http://www.lex-zhao.xyz/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>netty之ChannelPipeline和ChannelHandler</title>
    <link href="http://www.lex-zhao.xyz/2017/07/15/netty%E4%B9%8BChannelPipeline%E5%92%8CChannelHandler/"/>
    <id>http://www.lex-zhao.xyz/2017/07/15/netty之ChannelPipeline和ChannelHandler/</id>
    <published>2017-07-15T09:43:09.000Z</published>
    <updated>2017-07-15T10:55:35.918Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Netty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责连模式的一种变形（Netty的三层架构分别为通信业务层，职责链，上层业务），主要是方便事件的拦截和用户业务逻辑的定制。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://www.lex-zhao.xyz/tags/java/"/>
    
      <category term="Netty" scheme="http://www.lex-zhao.xyz/tags/Netty/"/>
    
      <category term="nio" scheme="http://www.lex-zhao.xyz/tags/nio/"/>
    
  </entry>
  
  <entry>
    <title>小问题</title>
    <link href="http://www.lex-zhao.xyz/2017/07/11/%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://www.lex-zhao.xyz/2017/07/11/小问题/</id>
    <published>2017-07-11T02:28:37.000Z</published>
    <updated>2017-07-11T02:34:55.661Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;今天吃饭的时候，问了自己一个问题，java反射到底是个啥，java反射可以实现啥？&lt;br&gt;自己稍微总结一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;java反射是在程序运行时，拿到一个类可以得到类的全部属性和方法，拿到一个对象，可以调用对象的全部属性和方法。&lt;/strong&gt;&lt;/p
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://www.lex-zhao.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>并发锁与条件变量</title>
    <link href="http://www.lex-zhao.xyz/2017/07/09/%E5%B9%B6%E5%8F%91%E9%94%81%E4%B8%8E%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/"/>
    <id>http://www.lex-zhao.xyz/2017/07/09/并发锁与条件变量/</id>
    <published>2017-07-09T05:44:44.000Z</published>
    <updated>2017-07-09T06:05:53.790Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;《Java 并发编程实践》一书给出了使用 ReentrantLock 的最佳时机：&lt;/p&gt;
&lt;p&gt;当你需要以下高级特性时，才应该使用：&lt;strong&gt;可定时的&lt;/strong&gt;、&lt;strong&gt;可轮询的&lt;/strong&gt;与&lt;strong&gt;可中断的&lt;/strong&gt;锁获取操作，&lt;strong&gt;公平队列&lt;/strong&gt;，或者&lt;strong&gt;非块结构&lt;/strong&gt;的锁。否则，请使用 synchronized&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;互斥同步&lt;/strong&gt;最主要的问题就是进行&lt;strong&gt;线程阻塞&lt;/strong&gt;和&lt;strong&gt;唤醒&lt;/strong&gt;所带来的性能问题，因而这种同步又称为阻塞同步，它属于一种悲观的并发策略，即线程获得的是独占锁。&lt;strong&gt;独占锁&lt;/strong&gt;意味着其他线程只能依靠阻塞来等待线程释放锁。而在 CPU 转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起 CPU 频繁的上下文切换导致效率很低。synchronized 采用的便是这种并发策略。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://www.lex-zhao.xyz/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://www.lex-zhao.xyz/tags/java/"/>
    
      <category term="Concurrent" scheme="http://www.lex-zhao.xyz/tags/Concurrent/"/>
    
  </entry>
  
</feed>
