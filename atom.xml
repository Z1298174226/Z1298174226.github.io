<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lex-Zhao</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Z1298174226.github.io/"/>
  <updated>2017-04-28T07:42:03.650Z</updated>
  <id>http://Z1298174226.github.io/</id>
  
  <author>
    <name>Xudong Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Latch</title>
    <link href="http://Z1298174226.github.io/2017/04/28/Latch/"/>
    <id>http://Z1298174226.github.io/2017/04/28/Latch/</id>
    <published>2017-04-28T07:40:52.000Z</published>
    <updated>2017-04-28T07:42:03.650Z</updated>
    
    <content type="html"><![CDATA[<p>#Latch</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Latch&lt;/p&gt;

    
    </summary>
    
      <category term="技术" scheme="http://Z1298174226.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://Z1298174226.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>五月任务计划</title>
    <link href="http://Z1298174226.github.io/2017/04/28/%E4%BA%94%E6%9C%88%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/"/>
    <id>http://Z1298174226.github.io/2017/04/28/五月任务计划/</id>
    <published>2017-04-28T04:59:25.000Z</published>
    <updated>2017-04-28T05:21:52.242Z</updated>
    
    <content type="html"><![CDATA[<p>####技术目标</p>
<ul>
<li>深入研究<strong>OSGi</strong>，理解java模块化编程，以及OSGi如何打破类加载机制的双亲委派模型<br> 预期目标：开发一个<strong>Opendaylight</strong>可用的Bundle，具体功能为获取网络拓普信息并建路</li>
<li>结合Spring技术内幕一书，研究<strong>Spring</strong>源码，并以此进一步锤炼java</li>
<li>尝试编译OpenJDK</li>
</ul>
<p>####论文目标</p>
<ul>
<li>5号之间将论文搞定</li>
<li>15号之前完成论文翻译工作</li>
</ul>
<p>#####出行</p>
<ul>
<li>争取在月内和女神实现<strong>厦门</strong>行</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;####技术目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深入研究&lt;strong&gt;OSGi&lt;/strong&gt;，理解java模块化编程，以及OSGi如何打破类加载机制的双亲委派模型&lt;br&gt; 预期目标：开发一个&lt;strong&gt;Opendaylight&lt;/strong&gt;可用的Bundle，具体
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>synchronized关键字</title>
    <link href="http://Z1298174226.github.io/2017/04/28/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://Z1298174226.github.io/2017/04/28/synchronized关键字/</id>
    <published>2017-04-28T04:24:43.000Z</published>
    <updated>2017-04-28T04:32:52.272Z</updated>
    
    <content type="html"><![CDATA[<p>在<strong>并发编程</strong>中，多线程同时并发访问的资源叫做<strong>临界资源</strong>，当多个线程同时访问对象并要求操作相同资源时，分割了原子操作就有可能出现数据的不一致或数据不完整的情况，为避免这种情况的发生，我们会采取同步机制，以确保在某一时刻，方法内只允许有一个线程。</p>
<p>采用 synchronized 修饰符实现的同步机制叫做互斥锁机制，它所获得的锁叫做互斥锁。每个对象都有一个 monitor (锁标记)，当线程拥有这个锁标记时才能访问这个资源，没有锁标记便进入锁池。任何一个对象系统都会为其创建一个互斥锁，这个锁是为了分配给线程的，防止打断原子操作。每个对象的锁只能分配给一个线程，因此叫做互斥锁。</p>
<p>这里就使用同步机制获取互斥锁的情况，进行几点说明：</p>
<p>1、如果同一个方法内同时有两个或更多线程，则每个线程有自己的<strong>局部变量</strong>拷贝。</p>
<p>2、类的每个实例都有自己的对象级别锁。当一个线程访问实例对象中的 synchronized 同步代码块或同步方法时，该线程便获取了该实例的对象级别锁，其他线程这时如果要访问 synchronized 同步代码块或同步方法，便需要阻塞等待，直到前面的线程从同步代码块或方法中退出，释放掉了该对象级别锁。</p>
<p>3、访问同一个类的不同实例对象中的同步代码块，不存在阻塞等待获取对象锁的问题，因为它们获取的是各自实例的对象级别锁，相互之间没有影响。</p>
<p>4、持有一个对象级别锁不会阻止该线程被交换出来，也不会阻塞其他线程访问同一示例对象中的非 synchronized 代码。当一个线程 A 持有一个对象级别锁（即进入了 synchronized 修饰的代码块或方法中）时，线程也有可能被交换出去，此时线程 B 有可能获取执行该对象中代码的时间，但它只能执行非同步代码（没有用 synchronized 修饰），当执行到同步代码时，便会被阻塞，此时可能线程规划器又让 A 线程运行，A 线程继续持有对象级别锁，当 A 线程退出同步代码时（即释放了对象级别锁），如果 B 线程此时再运行，便会获得该对象级别锁，从而执行 synchronized 中的代码。</p>
<p>5、持有对象级别锁的线程会让其他线程阻塞在所有的 synchronized 代码外。例如，在一个类中有三个synchronized 方法 a，b，c，当线程 A 正在执行一个实例对象 M 中的方法 a 时，它便获得了该对象级别锁，那么其他的线程在执行同一实例对象（即对象 M）中的代码时，便会在所有的 synchronized 方法处阻塞，即在方法 a，b，c 处都要被阻塞，等线程 A 释放掉对象级别锁时，其他的线程才可以去执行方法 a，b 或者 c 中的代码，从而获得该对象级别锁。</p>
<p>6、使用 synchronized（obj）同步语句块，可以获取指定对象上的对象级别锁。obj 为对象的引用，如果获取了 obj 对象上的对象级别锁，在并发访问 obj 对象时时，便会在其 synchronized 代码处阻塞等待，直到获取到该 obj对象的对象级别锁。当 obj 为 this 时，便是获取当前对象的对象级别锁。</p>
<p>7、类级别锁被特定类的所有示例共享，它用于控制对 static 成员变量以及 static 方法的并发访问。具体用法与对象级别锁相似。</p>
<p>8、互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。synchronized 关键字经过编译后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令。根据虚拟机规范的要求，在执行 monitorenter 指令时，首先要尝试获取对象的锁，如果获得了锁，把锁的计数器加 1，相应地，在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁便被释放了。由于 synchronized 同步块对同一个线程是可重入的，因此一个线程可以多次获得同一个对象的互斥锁，同样，要释放相应次数的该互斥锁，才能最终释放掉该锁。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;strong&gt;并发编程&lt;/strong&gt;中，多线程同时并发访问的资源叫做&lt;strong&gt;临界资源&lt;/strong&gt;，当多个线程同时访问对象并要求操作相同资源时，分割了原子操作就有可能出现数据的不一致或数据不完整的情况，为避免这种情况的发生，我们会采取同步机制，以确保在某
    
    </summary>
    
    
  </entry>
  
</feed>
