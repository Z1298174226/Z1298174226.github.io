<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[AccountMerge(UnionFind)]]></title>
      <url>/2017/12/22/AccountMerge-UnionFind/</url>
      <content type="html"><![CDATA[<p><strong>721. Accounts Merge</strong><br><img src="http://opeygftv2.bkt.clouddn.com/721.JPG" alt=""></p>
<a id="more"></a>
<p>根据题意，容易想到应用并查集来解决问题。</p>
<p>但又是一道没有做出来的题。</p>
<p>这个是discuss当中排名最靠前的答案，感觉思路非常精巧。通过代码具体分析一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; accountsMerge(List&lt;List&lt;String&gt;&gt; acts) &#123;</div><div class="line">        Map&lt;String, String&gt; owner = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Map&lt;String, String&gt; parents = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        Map&lt;String, TreeSet&lt;String&gt;&gt; unions = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (List&lt;String&gt; a : acts) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.size(); i++) &#123;</div><div class="line">                parents.put(a.get(i), a.get(i));</div><div class="line">                owner.put(a.get(i), a.get(<span class="number">0</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (List&lt;String&gt; a : acts) &#123;</div><div class="line">            String p = find(a.get(<span class="number">1</span>), parents);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; a.size(); i++)</div><div class="line">                parents.put(find(a.get(i), parents), p);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (List&lt;String&gt; a : acts) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.size(); i++) &#123;</div><div class="line">                String p = find(a.get(i), parents);</div><div class="line">                <span class="keyword">if</span> (!unions.containsKey(p)) unions.put(p, <span class="keyword">new</span> TreeSet&lt;&gt;());</div><div class="line">                unions.get(p).add(a.get(i));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (String p : unions.keySet()) &#123;</div><div class="line">            List&lt;String&gt; emails = <span class="keyword">new</span> ArrayList(unions.get(p));</div><div class="line">            emails.add(<span class="number">0</span>, owner.get(p));</div><div class="line">            res.add(emails);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">find</span><span class="params">(String s, Map&lt;String, String&gt; p)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> p.get(s) == s ? s : find(p.get(s), p);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> UnionFind </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring源码曲径通幽(1)---Ioc控制反转]]></title>
      <url>/2017/12/03/Spring%E6%BA%90%E7%A0%81%E6%9B%B2%E5%BE%84%E9%80%9A%E5%B9%BD-1-Ioc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Binary Search总结]]></title>
      <url>/2017/12/03/Binary-Search%E6%80%BB%E7%BB%93/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> BST </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[canPartitionKSubsets]]></title>
      <url>/2017/11/23/canPartitionKSubsets/</url>
      <content type="html"><![CDATA[<p>拿出以下三道题来进行对比和总结。</p>
<p><strong>560. Subarray Sum Equals K</strong></p>
<p><strong>523. Continuous Subarray Sum</strong></p>
<p><strong>209. Minimum Size Subarray Sum</strong></p>
<p><strong>713. Subarray Product Less Than K</strong></p>
<a id="more"></a>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171123110057.png" alt=""></p>
<hr>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171123110055.png" alt=""></p>
<hr>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171123110955.png" alt=""></p>
<hr>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171123110049.png" alt=""></p>
<p>前三道题看到求连续子序列和问题，条件反射想到了Two Pointer，同时通过构建Map，可以以空间换时间的方式进一步降低算法复杂度。</p>
<p><strong>map put进初值</strong></p>
<ul>
<li>求子序列长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.put(<span class="number">0</span>, -<span class="number">1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>求序列个数</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map.put(<span class="number">0</span>, <span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>这几道题可以进一步做引申，分为两种情况：</p>
<ul>
<li>和为k</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">   result += num;</div><div class="line">   Integer pre = map.get(result - k);</div><div class="line">   <span class="keyword">if</span>(pre != <span class="keyword">null</span>) &#123;</div><div class="line">      ...</div><div class="line">   &#125;</div><div class="line">   map.put(result, map.getOrDefault(result, <span class="number">0</span>) + <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>和为 m * k（k = 1， 2， 3， …)</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</div><div class="line">   result += num;</div><div class="line">   result %= k;</div><div class="line">   Integer pre = map.get(result);</div><div class="line">   <span class="keyword">if</span>(pre != <span class="keyword">null</span>) &#123;</div><div class="line">      ...</div><div class="line">   &#125;</div><div class="line">   map.put(...);</div><div class="line">&#125;</div><div class="line"></div><div class="line">`</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">subarraySum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>; <span class="keyword">int</span> resultSum = <span class="number">0</span>;</div><div class="line">        map.put(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            resultSum += nums[i];</div><div class="line">            Integer pre = map.get(resultSum - k);</div><div class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span>) &#123;</div><div class="line">                result += pre;</div><div class="line">            &#125;</div><div class="line">            map.put(resultSum, map.getOrDefault(resultSum, <span class="number">0</span>) + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>=======================</p>
<p>713题是一道DP，采用带备忘自顶向下的方法，思路比较清晰。同时因为各子序列间不能有重叠项，因此需要引入boolean类型数组作标记。这道题同样可以引申为两种情况：</p>
<ul>
<li>k = 2(变成了一道01背包问题）</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canPartitionKSubsets</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums)</div><div class="line">            sum += num;</div><div class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        sum /= <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>];</div><div class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</div><div class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = sum; j &gt;= nums[i]; j--) &#123;</div><div class="line">                dp[j] = Math.min(dp[j], dp[j - nums[i]]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[sum] &lt; <span class="number">10000000</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>k &gt; 2</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canPartitionKSubsets</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:nums)sum += num;</div><div class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">0</span> || sum%k != <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span>[] visited = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">        <span class="keyword">return</span> canPartition(nums, visited, <span class="number">0</span>, k, <span class="number">0</span>, <span class="number">0</span>, sum/k);</div><div class="line">    &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span>[] visited, <span class="keyword">int</span> start_index, <span class="keyword">int</span> k, <span class="keyword">int</span> cur_sum, <span class="keyword">int</span> cur_num, <span class="keyword">int</span> target)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(cur_sum == target &amp;&amp; cur_num&gt;<span class="number">0</span>)<span class="keyword">return</span> canPartition(nums, visited, <span class="number">0</span>, k-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, target);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start_index; i&lt;nums.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(visited[i] == <span class="number">0</span>)&#123;</div><div class="line">                visited[i] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span>(canPartition(nums, visited, i+<span class="number">1</span>, k, cur_sum + nums[i], cur_num++, target))<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                visited[i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AkkA_OSGi避坑指南]]></title>
      <url>/2017/11/20/AkkA-OSGi%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>实验室项目需要，这段时间一直在搞AkkA框架在OSGi平台上的搭建，由于相关资料少之又少，可以说踩坑无数，于是有了写一篇避坑大全的想法。</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171121105638.png" alt=""><br><a id="more"></a></p>
<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>AkkA框架基于scala开发，所以在构建工程时，要注意AkkA同scala以及typesafe应该保持版本号一致</p>
<ul>
<li>由pom构建</li>
</ul>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171121110112.png" alt=""></p>
<ul>
<li>由SBT构建</li>
</ul>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171121110234.png" alt=""></p>
<p>版本不一致的话会报各种无法解析依赖的错误</p>
<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>AKKA框架会按照默认路径寻找配置文件application.conf，当然显示指定配置文件路径也可以，默认路径严格遵循以下路径：</p>
<p><strong>src\main\resources\application.conf</strong></p>
<h5 id="OSGi平台如何启动AkkA"><a href="#OSGi平台如何启动AkkA" class="headerlink" title="OSGi平台如何启动AkkA"></a>OSGi平台如何启动AkkA</h5><p>启动类Activator需继承ActorSystemActivator，<strong>config</strong>同<strong>start（startImp）</strong>函数作用相同，为<strong>Activator</strong>的启动函数，同时注意需要将<strong>ActorSystem</strong>注册到<strong>BundleContext</strong>上来</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20171121111657.png" alt=""></p>
<h5 id="收发函数的调用"><a href="#收发函数的调用" class="headerlink" title="收发函数的调用"></a>收发函数的调用</h5><p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20171121112413.png" alt=""></p>
<h5 id="远程ActorRef的获取"><a href="#远程ActorRef的获取" class="headerlink" title="远程ActorRef的获取"></a>远程ActorRef的获取</h5><p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171121112757.png" alt=""></p>
<h5 id="多个配置文件共存"><a href="#多个配置文件共存" class="headerlink" title="多个配置文件共存"></a>多个配置文件共存</h5><p>上文提到AkkA会按照默认路径寻找配置文件，但假如OSGi平台当中存在多个配置文件，会导致当前bundle追寻到错误的配置文件，这个问题相当棘手。</p>
<p>比如bundleA存在配置文件application.confA，但是bundleA <strong>import</strong> 了BundleB，而bundleB拥有配置文件applicationB,那么BundleA最终调用的配置文件很有可能变成applicationB，而不是希望的applicationA，错误发生了。</p>
<p>而且很有可能报的是这样的错误：</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171121113920.png" alt=""></p>
<p>后来发现，即使显示地指定bundleA配置文件application.conf的路径，这个错误依然存在，换句话说，只要OSGi平台当中存在多个配置文件，就会引发错误，所以可行的办法就是保证当前只有一个配置文件。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AkkA </tag>
            
            <tag> OSGi </tag>
            
            <tag> scala </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Two Pointer总结]]></title>
      <url>/2017/11/19/Two-Pointer%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a><strong>前序</strong></h3><p>Two Pointer应该说之前用到的还是很多的，像一次循环找到链表的中间元素，像快排等等，刚好这两天Leetcode刷到了Two Pointer这一块，借此机会做一个总结。在大多数适合于Two Pointer的场景下，恰当地使用Two pointer可以将复杂度维持在O(N)，特别是一些求解连续子序列相关的问题，Two pointer不失为一种很好地切入点。<br><a id="more"></a></p>
<h3 id="Two-pointer应用场景总结"><a href="#Two-pointer应用场景总结" class="headerlink" title="Two pointer应用场景总结"></a>Two pointer应用场景总结</h3><ul>
<li><p>合并两个sorted array到一个sorted array</p>
</li>
<li><p>一次循环找到链表的中间元素</p>
</li>
<li><p>判断一个链表是否存在环</p>
</li>
<li><p>找到链表中倒数第三个元素</p>
</li>
<li><p>求解连续子序列相关</p>
</li>
</ul>
<p>接下来，我们将按照难度级别，对几个例子进行简单分析</p>
<h3 id="Esay"><a href="#Esay" class="headerlink" title="Esay"></a>Esay</h3><h5 id="167-Two-SumII-Input-array-is-sorted"><a href="#167-Two-SumII-Input-array-is-sorted" class="headerlink" title="167. Two SumII - Input array is sorted"></a>167. Two SumII - Input array is sorted</h5><p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.</p>
<p>You may assume that each input would have exactly one solution and you may not use the same element twice.</p>
<p>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p>
<p>对于已经排好序的array，Two Pointer可以实现时间复杂度O(N)，空间复杂度为1，即两个pointer分别从两端向中间移动，其sun只有两种可能，和如果比target小，则左端指针右移，如果sum比target大，则右端指针左移，否则直接返回。如果不存在满则条件的解，则抛出异常。</p>
<h3 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h3><h5 id="ContinuousMaximumSubarray"><a href="#ContinuousMaximumSubarray" class="headerlink" title="ContinuousMaximumSubarray"></a>ContinuousMaximumSubarray</h5><p>对于给定的array，求解不大于target的连续最大和子序列</p>
<p>对于这道求和题，除了Two Pointer的应用，还有一个技巧就是构造Cumulative sum array这样的一个递增序列，并且满足cumulative[end]-cumulative[start] &gt; target &amp;&amp; cumulative[end - 1] - cumulative[start] &lt;= target的条件，而start和end两个指针刚好定位了<br>满足题设条件的连续子序列。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinuousMaximumSubarray</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] continuousMaximumSubarray(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">int</span>[] sumArray = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</div><div class="line">        sumArray[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            sumArray[i + <span class="number">1</span>] = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>; <span class="keyword">int</span> right = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(left &lt; sumArray.length) &#123;</div><div class="line">            <span class="keyword">while</span>(right &lt; sumArray.length &amp;&amp; sumArray[right] - sumArray[left] &lt;= k)</div><div class="line">                right++;</div><div class="line">            <span class="keyword">if</span>(max &lt; sumArray[right - <span class="number">1</span>] - sumArray[left]) &#123;</div><div class="line">                max = sumArray[right - <span class="number">1</span>] - sumArray[left];</div><div class="line">                result[<span class="number">0</span>] = left; result[<span class="number">1</span>] = right - <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="ContinuousMinimumSubarray"><a href="#ContinuousMinimumSubarray" class="headerlink" title="ContinuousMinimumSubarray"></a>ContinuousMinimumSubarray</h5><p>求解含有k个不同数字的连续最小和子序列</p>
<p>同上一道题相比，两道题如出一辙，只需对约束条件稍加修改即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinuousMinimumSubarray</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] continuousMinimumSubarray(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</div><div class="line">        <span class="keyword">int</span>[] sumArray = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</div><div class="line">        sumArray[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            sumArray[i + <span class="number">1</span>] = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> right = <span class="number">0</span>; <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">while</span>(left &lt; sumArray.length) &#123;</div><div class="line">            <span class="keyword">while</span>(right &lt; sumArray.length &amp;&amp; right - left &lt; k)</div><div class="line">                right++;</div><div class="line">            <span class="keyword">if</span>(right &lt; sumArray.length &amp;&amp; min &gt; sumArray[right] - sumArray[left]) &#123;</div><div class="line">                min = sumArray[right] - sumArray[left];</div><div class="line">                result[<span class="number">0</span>] = left; result[<span class="number">1</span>] = right - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209.Minimum Size Subarray Sum"></a>209.Minimum Size Subarray Sum</h5><p>Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn’t one, return 0 instead.</p>
<p>For example, given the array [2,3,1,2,4,3] and s = 7,<br>the subarray [4,3] has the minimal length under the problem constraint.</p>
<p>这道题如果稍微修改一下，即sum == s 而不是sum &gt;= s, 感觉可以直接应用map来解决，实际上属于拿空间换时间的方法，在此给出程序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        Map&lt;Integer, Integer&gt; mapIndex = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</div><div class="line">        mapIndex.put(<span class="number">0</span>, -<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> sumResult = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            sumResult += nums[i];</div><div class="line">            Integer pre = mapIndex.get(sumResult - s);</div><div class="line">            <span class="keyword">if</span>(pre != <span class="keyword">null</span>) &#123;</div><div class="line">                min = Math.min(min, i - pre);</div><div class="line">            &#125;</div><div class="line">            mapIndex.put(sumResult, i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>而如果应用Two Pointer，则又回到了之前两道题的固定套路，区别仅仅是约束条件的改变，所谓万变不离其宗，最终left和right两个指针都可以为我们准确而方便地定位到满足题设的子序列。</p>
<p><strong>注意cumulative[]和nums[]指针的差别和转换</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] sumArray = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length + <span class="number">1</span>];</div><div class="line">        sumArray[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            sumArray[i + <span class="number">1</span>] = sum;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> min = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">int</span> left = <span class="number">0</span>; <span class="keyword">int</span> right = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(left &lt; sumArray.length) &#123;</div><div class="line">            <span class="keyword">while</span>(right &lt; sumArray.length &amp;&amp; sumArray[right] - sumArray[left] &lt; s)</div><div class="line">                right++;</div><div class="line">            <span class="keyword">if</span>(right &lt; sumArray.length &amp;&amp; sumArray[right] - sumArray[left] &gt;= s &amp;&amp; min &gt; right - left)</div><div class="line">                min = right - left;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> min &gt; <span class="number">10000000</span> ? <span class="number">0</span> : min;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a>567. Permutation in String</h5><p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171120232114.png" alt=""></p>
<p>常规思路，构造</p>
<p>int[] cnt = new int[256];</p>
<p>int[] now = new int[256];</p>
<p>这道题需要特别注意的应该是边界条件，即对于</p>
<p>right - left != s1.length() &amp;&amp; left &lt;= right</p>
<p>应该有now[s1.charAt(left)]–;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[] cnt = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">    <span class="keyword">int</span>[] now = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)</div><div class="line">        cnt[s1.charAt(i)]++;</div><div class="line">    <span class="keyword">int</span> right = <span class="number">0</span>; <span class="keyword">int</span> left = <span class="number">0</span>;</div><div class="line">   <span class="keyword">while</span>(left &lt; s2.length()) &#123;</div><div class="line">        <span class="keyword">while</span>(right &lt; s2.length() &amp;&amp; now[s2.charAt(right)] + <span class="number">1</span> &lt;= cnt[s2.charAt(right)]) &#123;</div><div class="line">                now[s2.charAt(right)] += <span class="number">1</span>;</div><div class="line">                right++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(right - left == s1.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(left &lt;= right) now[s2.charAt(left)]--;</div><div class="line">        left++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[递归  回溯  DFS]]></title>
      <url>/2017/11/06/%E9%80%92%E5%BD%92-%E5%9B%9E%E6%BA%AF-DFS/</url>
      <content type="html"><![CDATA[<p>参考<a href="http://blog.csdn.net/ffmpeg4976/article/details/45007439" target="_blank" rel="external">http://blog.csdn.net/ffmpeg4976/article/details/45007439</a></p>
<p>在程序设计中，有相当一类求一组解，或求全部解或求最优解的问题，例如读者熟悉的八皇后问题，不是根据某种特定的计算法则，而是利用试探和回溯的搜索技术求解。回溯法也是设计递归过程的一种重要方法，它的求解过程实质上是一个先序遍历一棵”状态树”的过程,只是这棵树不是遍历前预先建立的,而是隐含在遍历过程中。</p>
<p>《数据结构》(严蔚敏)<br>怎么理解这段话呢？<br><a id="more"></a></p>
<p>首先，某种问题的解我们很难去找规律计算出来，没有公式可循，只能列出所有可能的解，然后一个个检查每个解是否符合我们要找的条件，也就是通常说的遍历。而解空间很多是树型的，就是树的遍历。<br>其次，树的先序遍历，也就是根是先被检查的，二叉树的先序遍历是根，左子树，右子树的顺序被输出。如果把树看做一种特殊的图的话，DFS就是先序遍历。所以，回溯和DFS是联系非常紧密的，可以认为回溯是DFS的一种应用场景。另外，DFS有个好处，它只存储深度，不存储广度。所以空间复杂度较小，而时间复杂度较大。</p>
<p>最后，某些解空间是非常大的，可以认为是一个非常庞大的树，此时完全遍历的时间复杂度是难以忍受的。此时可以在遍历的同时检查一些条件，当遍历某分支的时候，若发现条件不满足，则退回到根节点进入下一个分支的遍历。这就是“回溯”这个词的来源。而根据条件有选择的遍历，叫做剪枝或分枝定界。</p>
<p>Wiki上有一个很棒的回溯法的演示：</p>
<p><img src="http://img.blog.csdn.net/20150412084326667" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> dfs </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Construct Binary Tree from Array]]></title>
      <url>/2017/11/06/Construct-Binary-Tree-from-Array/</url>
      <content type="html"><![CDATA[<p><strong>105. Construct Binary Tree from Preorder and Inorder Traversal</strong></p>
<p><strong>106. Construct Binary Tree from Inorder and Postorder Traversal</strong></p>
<p>可以说是两道再经典不过的dfs题了,思路都很清晰，在这里记录一下吧<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> helper(<span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>, preorder, inorder);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">helper</span><span class="params">(<span class="keyword">int</span> preStart, <span class="keyword">int</span> inStart, <span class="keyword">int</span> inEnd, <span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preStart &gt; preorder.length - <span class="number">1</span> || inStart &gt; inEnd) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(preorder[preStart]);</div><div class="line">    <span class="keyword">int</span> inIndex = <span class="number">0</span>; <span class="comment">// Index of current root in inorder</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = inStart; i &lt;= inEnd; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (inorder[i] == root.val) &#123;</div><div class="line">            inIndex = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    root.left = helper(preStart + <span class="number">1</span>, inStart, inIndex - <span class="number">1</span>, preorder, inorder);</div><div class="line">    root.right = helper(preStart + inIndex - inStart + <span class="number">1</span>, inIndex + <span class="number">1</span>, inEnd, preorder, inorder);</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTreePostIn</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (inorder == <span class="keyword">null</span> || postorder == <span class="keyword">null</span> || inorder.length != postorder.length)</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	HashMap&lt;Integer, Integer&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer,Integer&gt;();</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inorder.length;++i)</div><div class="line">		hm.put(inorder[i], i);</div><div class="line">	<span class="keyword">return</span> buildTreePostIn(inorder, <span class="number">0</span>, inorder.length-<span class="number">1</span>, postorder, <span class="number">0</span>, </div><div class="line">                          postorder.length-<span class="number">1</span>,hm);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTreePostIn</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span> is, <span class="keyword">int</span> ie, <span class="keyword">int</span>[] postorder, <span class="keyword">int</span> ps, <span class="keyword">int</span> pe, </span></span></div><div class="line">                                 HashMap&lt;Integer,Integer&gt; hm)&#123;</div><div class="line">	<span class="keyword">if</span> (ps&gt;pe || is&gt;ie) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	TreeNode root = <span class="keyword">new</span> TreeNode(postorder[pe]);</div><div class="line">	<span class="keyword">int</span> ri = hm.get(postorder[pe]);</div><div class="line">	TreeNode leftchild = buildTreePostIn(inorder, is, ri-<span class="number">1</span>, postorder, ps, ps+ri-is-<span class="number">1</span>, hm);</div><div class="line">	TreeNode rightchild = buildTreePostIn(inorder,ri+<span class="number">1</span>, ie, postorder, ps+ri-is, pe-<span class="number">1</span>, hm);</div><div class="line">	root.left = leftchild;</div><div class="line">	root.right = rightchild;</div><div class="line">	<span class="keyword">return</span> root;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> dfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[动态规划问题带备忘自顶向下方法的典型应用]]></title>
      <url>/2017/11/05/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E5%B8%A6%E5%A4%87%E5%BF%98%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B8%E5%9E%8B%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong> 44. Wildcard Matching</strong></p>
<p><strong> 10. Regular Expression Matching</strong><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105145034.png" alt=""><br><a id="more"></a><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105145038.png" alt=""></p>
<p>两道题思路基本相同，所以我放在了一起来看，都可以归结到两个字符串求<strong>最长匹配子序列</strong>问题。我的算法是全部应用带备忘的自顶向下方法，跟Leetcode排名比较靠前的几个答案比较了一下，思路要更加清晰一些，并且由于该方法在某些情况下并不需要考察全部的子问题，所以实际运行时间可能会更少一些。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        result = help(s, p, dp, s.length(), p.length());</div><div class="line">        <span class="keyword">if</span>(result == s.length()) <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//(s.length() &gt; p.length() ? s.length(): p.length())) return true;</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(String s, String p, <span class="keyword">int</span>[][] dp, <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dp[len1][len2] != <span class="number">0</span>) <span class="keyword">return</span> dp[len1][len2];</div><div class="line">        <span class="keyword">if</span>(len1 == <span class="number">0</span> &amp;&amp; len2 == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len1 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2; i++) &#123;</div><div class="line">                <span class="keyword">if</span>(p.charAt(i) != <span class="string">'*'</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(s.charAt(len1 - <span class="number">1</span>) == p.charAt(len2 - <span class="number">1</span>) || p.charAt(len2 - <span class="number">1</span>) == <span class="string">'?'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> temp = help(s, p, dp, len1 - <span class="number">1</span>, len2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(temp != -<span class="number">1</span>)  dp[len1][len2] = temp + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p.charAt(len2 - <span class="number">1</span>) == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> temp_1 = help(s, p, dp, len1 - <span class="number">1</span>, len2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(temp_1 != -<span class="number">1</span>) dp[len1][len2] = temp_1 + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> temp_2 = help(s, p, dp, len1 - <span class="number">1</span>, len2);</div><div class="line">                <span class="keyword">if</span>(temp_2 != -<span class="number">1</span>) dp[len1][len2] = temp_2 + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">int</span> temp_3 = help(s, p, dp, len1, len2 - <span class="number">1</span>);</div><div class="line">                    dp[len1][len2] = temp_3;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[len1][len2];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s.length() + <span class="number">1</span>][p.length() + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</div><div class="line">        result = help(s, p, dp, s.length(), p.length());</div><div class="line">        <span class="keyword">if</span>(result == s.length()) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">help</span><span class="params">(String s, String p, <span class="keyword">int</span>[][] dp, <span class="keyword">int</span> len1, <span class="keyword">int</span> len2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dp[len1][len2] != <span class="number">0</span>) <span class="keyword">return</span> dp[len1][len2];</div><div class="line">        <span class="keyword">if</span>(len1 == <span class="number">0</span> &amp;&amp; len2 == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len1 == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span>(len2 == <span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len2 - <span class="number">1</span>; i ++) &#123;</div><div class="line">                <span class="keyword">if</span>(p.charAt(i) != <span class="string">'*'</span>)</div><div class="line">                    <span class="keyword">if</span>(i + <span class="number">1</span> &lt; len2 &amp;&amp; p.charAt(i + <span class="number">1</span>) != <span class="string">'*'</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">continue</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(p.charAt(len2 - <span class="number">1</span>) != <span class="string">'*'</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(len2 == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(s.charAt(len1 - <span class="number">1</span>) == p.charAt(len2 - <span class="number">1</span>) || p.charAt(len2 - <span class="number">1</span>) == <span class="string">'.'</span>) &#123;</div><div class="line">            <span class="keyword">int</span> temp = help(s, p, dp, len1 - <span class="number">1</span>, len2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(temp != -<span class="number">1</span>)  dp[len1][len2] = temp + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p.charAt(len2 - <span class="number">1</span>) == <span class="string">'*'</span> &amp;&amp; ( p.charAt(len2 - <span class="number">2</span>) == s.charAt(len1 - <span class="number">1</span>) || p.charAt(len2 - <span class="number">2</span>) == <span class="string">'.'</span>)) &#123;</div><div class="line">            <span class="keyword">int</span> temp_1 = help(s, p, dp, len1 - <span class="number">1</span>, len2 - <span class="number">1</span>);</div><div class="line">            <span class="keyword">if</span>(temp_1 != -<span class="number">1</span>) dp[len1][len2] = temp_1 + <span class="number">1</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">int</span> temp_2 = help(s, p, dp, len1 - <span class="number">1</span>, len2);</div><div class="line">                <span class="keyword">if</span>(temp_2 != -<span class="number">1</span>) dp[len1][len2] = temp_2 + <span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">int</span> temp_3 = help(s, p, dp, len1, len2 - <span class="number">2</span>);</div><div class="line">                    dp[len1][len2] = temp_3;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(p.charAt(len2 - <span class="number">1</span>) == <span class="string">'*'</span> &amp;&amp; p.charAt(len2 - <span class="number">2</span>) != s.charAt(len1 - <span class="number">1</span>)) &#123;</div><div class="line">            <span class="keyword">int</span> temp = help(s, p, dp, len1, len2 - <span class="number">2</span>);</div><div class="line">            dp[len1][len2] = temp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dp[len1][len2];</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Map在动态规划问题当中的应用]]></title>
      <url>/2017/11/05/Map%E5%9C%A8%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%97%AE%E9%A2%98%E5%BD%93%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><strong> 140. Word Break II</strong></p>
<p><strong> 638. Shopping Offers</strong></p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105143248.png" alt=""><br><a id="more"></a><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171105143348.png" alt=""></p>
<p>这两道题非常适合合在一起来看，通常动态规划问题适合用数组或者散列表来保存子问题的求解状态，但在某些情况下，比如子问题的状态是用列表或者字符串，不容易转化为数组，使用Map来保存子问题状态会更加便利，作为一种思路的拓展吧。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingOffers</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">shoppingOffers</span><span class="params">(List&lt;Integer&gt; price, List&lt;List&lt;Integer&gt;&gt; special, List&lt;Integer&gt; needs)</span> </span>&#123;</div><div class="line">        Map&lt;List&lt;Integer&gt;, Integer&gt; dp = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        List&lt;Integer&gt; allZero = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;needs.size();i++) &#123;</div><div class="line">            allZero.add(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        dp.put(allZero, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> dfs(needs, price, special, dp);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(List&lt;Integer&gt; needs, List&lt;Integer&gt; price, List&lt;List&lt;Integer&gt;&gt; special, Map&lt;List&lt;Integer&gt;, Integer&gt; dp)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(dp.containsKey(needs)) <span class="keyword">return</span> dp.get(needs);</div><div class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</div><div class="line">        <span class="keyword">for</span>(List&lt;Integer&gt; s : special) &#123;</div><div class="line">            List&lt;Integer&gt; needsCopy = <span class="keyword">new</span> ArrayList&lt;&gt;(needs);</div><div class="line">            <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;needs.size();i++) &#123;</div><div class="line">                needsCopy.set(i, needsCopy.get(i) - s.get(i));</div><div class="line">                <span class="keyword">if</span>(needsCopy.get(i) &lt; <span class="number">0</span>) &#123;</div><div class="line">                    valid = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(valid) &#123;</div><div class="line">                res = Math.min(res, s.get(needs.size()) + dfs(needsCopy, price, special, dp));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> noSpecial = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;needs.size();i++) &#123;</div><div class="line">            noSpecial += needs.get(i) * price.get(i);</div><div class="line">        &#125;</div><div class="line">        res = Math.min(res, noSpecial);</div><div class="line"></div><div class="line">        dp.put(needs, res);</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;</div><div class="line">       Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, List&lt;String&gt;&gt;();</div><div class="line">       <span class="keyword">return</span> dfs(s, wordDict, map);</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">dfs</span><span class="params">(String s, List&lt;String&gt; wordDict, Map&lt;String, List&lt;String&gt;&gt; map)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(map.containsKey(s)) &#123;</div><div class="line">           <span class="keyword">return</span> map.get(s);</div><div class="line">       &#125;</div><div class="line">       List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">       <span class="keyword">if</span>(s.length() == <span class="number">0</span>) &#123;</div><div class="line">           res.add(<span class="string">""</span>);</div><div class="line">           <span class="keyword">return</span> res;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">for</span>(String word : wordDict) &#123;</div><div class="line">           <span class="keyword">if</span>(s.startsWith(word)) &#123;</div><div class="line">               List&lt;String&gt; subList = dfs(s.substring(word.length()), wordDict, map);</div><div class="line">               <span class="keyword">for</span>(String sub : subList)</div><div class="line">                   res.add(word + (sub.isEmpty() ? <span class="string">""</span> : <span class="string">" "</span>) + sub);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       map.put(s, res);</div><div class="line">       <span class="keyword">return</span> res;</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">       list.add(<span class="string">"cat"</span>); list.add(<span class="string">"cats"</span>); list.add(<span class="string">"and"</span>); list.add(<span class="string">"sand"</span>);list.add(<span class="string">"dog"</span>);list.add(<span class="string">"t"</span>);</div><div class="line">       System.out.println(WordBreak.wordBreak(<span class="string">"catsanddog"</span>, list).size());</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[InterleavingString]]></title>
      <url>/2017/11/02/InterleabingString/</url>
      <content type="html"><![CDATA[<p>动态规划问题到目前为止已经刷了差不多40余题，借几道题稍微做一个总结。</p>
<p><strong>97. Interleaving String</strong></p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102104732.png" alt=""><br><a id="more"></a><br>典型的动态规划问题。首先自然想到构造维度分别为s1.length()+1和s2.length()+1的boolean类型二维数组matrix</p>
<p>另外，组成字符串s3的char要么来自s1，要么来自s2，因此，顺次将s1同s2和s3进行比较即可</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">当row == <span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="number">1</span> to s2.length()  &lt;--- col</div><div class="line"></div><div class="line">matrix[<span class="number">0</span>][col] = matrix[<span class="number">0</span>][col-<span class="number">1</span>] &amp;&amp; (s2.charAt(col-<span class="number">1</span>) == s3.charAt(col-<span class="number">1</span>))</div><div class="line">当col == <span class="number">0</span></div><div class="line"><span class="keyword">for</span> <span class="number">1</span> to s1.length()  &lt;--- row</div><div class="line">matrix[<span class="number">0</span>][col] = matrix[row-<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; (s1.charAt(row-<span class="number">1</span>) == s3.charAt(row-<span class="number">1</span>))</div><div class="line"><span class="keyword">for</span> <span class="number">1</span> to s1.length()  &lt;---row</div><div class="line"><span class="keyword">for</span> <span class="number">1</span> to s2.length() &lt;---col</div><div class="line">matrix[row][col] = (matrix[row-<span class="number">1</span>][col] &amp;&amp; s1.charAt(row-<span class="number">1</span>) == s3.charAt(row+col-<span class="number">1</span>) || (matrix[row][col] &amp;&amp; s2.charAt(col-<span class="number">1</span>) == s3.charAt(row + col -<span class="number">1</span>))</div><div class="line"><span class="keyword">return</span> matrix[s1.length()][s2.length()]</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterleave</span><span class="params">(String s1, String s2, String s3)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((s1.length()+s2.length())!=s3.length()) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">boolean</span>[s2.length()+<span class="number">1</span>][s1.length()+<span class="number">1</span>];</div><div class="line"></div><div class="line">    matrix[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; matrix[<span class="number">0</span>].length; i++)&#123;</div><div class="line">        matrix[<span class="number">0</span>][i] = matrix[<span class="number">0</span>][i-<span class="number">1</span>]&amp;&amp;(s1.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; matrix.length; i++)&#123;</div><div class="line">        matrix[i][<span class="number">0</span>] = matrix[i-<span class="number">1</span>][<span class="number">0</span>]&amp;&amp;(s2.charAt(i-<span class="number">1</span>)==s3.charAt(i-<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; matrix.length; i++)&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; matrix[<span class="number">0</span>].length; j++)&#123;</div><div class="line">            matrix[i][j] = (matrix[i-<span class="number">1</span>][j]&amp;&amp;(s2.charAt(i-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>)))</div><div class="line">                    || (matrix[i][j-<span class="number">1</span>]&amp;&amp;(s1.charAt(j-<span class="number">1</span>)==s3.charAt(i+j-<span class="number">1</span>)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> matrix[s2.length()][s1.length()];</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，时间复杂度为O(s1.length() * s2.length())</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MinimumASCIIDeleteSum]]></title>
      <url>/2017/11/02/MinimumASCIIDeleteSum/</url>
      <content type="html"><![CDATA[<p><strong>712. Minimum ASCII Delete Sum for Two Strings</strong></p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102110943.png" alt=""><br><a id="more"></a><br>其实动态规划问题，个人感觉好的算法，首先是明确每个阶段的状态去表征什么，再次才是寻找状态转移方程。</p>
<p><strong>总结一下动态规划问题的策略步骤：</strong></p>
<ul>
<li><p>子问题的划分。 按照一定的顺序把整个问题划分为若干个规模相等的子问题。</p>
</li>
<li><p>子问题状态的确定。根据问题需求和子问题的各个属性确定子问题的”状态“，同时需要满足无后效性。</p>
</li>
<li><p>推导状态转移方程。 状态转移指的就是根据上一个状态（或者叫上一个子问题的解）来获取当前子问题解的过程。 如果要进行具体的计算，那么就需要写出具体的算式。这一步也是最需要时间的，传说中最考验功力的一关</p>
</li>
<li><p>边界条件和初始值的确定。由于动态规划是根据之前子问题的解来推导当前子问题的解，所以最初状态的值必须确定。边界条件是用来描述结束状态的，如果当前状态完全到达边界，便视为已经到达了最终状态。</p>
</li>
</ul>
<p>这道题，同样，当我们构造出一个二维状态数组时，这个数组应该表示什么？我的想法是每个状态去表征s1前row的子字符串和s2前col字符串删除的最小ASCII码。</p>
<p>这道题我用了递归，感觉思路会更明确一些，当然两层循环嵌套也可以，两种方法复杂度相当。</p>
<p><strong>在这里，总结一下动态规划的两种等价实现方法:</strong></p>
<ul>
<li><p>带备忘的自顶向下法。此方法仍按照自然的递归形式编写过程，但过程会保存每一个子问题的解（通常保存在数组或散列表当中）。当需要一个子问题的解时，过程首先检查过程是否已保存过此解。如果是，则直接返回保存的结果，否则，按通常方式计算这个子问题。我们称这个递归过程是带备忘的。因为它已经记住了之前已经计算的结果</p>
</li>
<li><p>第二种方法称为自底向上法。这种问题一般需要恰当定义子问题“规模”的概念，使得任何子问题的求解都只依赖于“更小子问题”的求解。因而我们可以将子问题按规模排序，按由小至大的顺序进行求解。当求解某个子问题时，它所依赖的那些更小的子问题都已经求解完毕，结果已经保存。每个子问题只需要求解一次，当我们求解它（也是第一次遇到它）时，它的所有前提子问题都已经求解完成。</p>
</li>
</ul>
<p>两种方法得到的算法具有相同的渐进运行时间，仅有的差异是在某些特殊情况下，自顶向下的方法并为真正递归所有可能的子问题。另外，由于没有频繁地递归函数调用的开销，自底向上方法的时间复杂性函数通常具有更小的系数。</p>
<p>直接上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumDeleteSum</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[s1.length() + <span class="number">1</span>][s2.length() + <span class="number">1</span>];</div><div class="line">     </div><div class="line">    <span class="keyword">return</span> findMinSum(s1,s2,s1.length(),s2.length(),dp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinSum</span><span class="params">(String s1,String s2,<span class="keyword">int</span> len1,<span class="keyword">int</span> len2,<span class="keyword">int</span>[][] dp)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(dp[len1][len2] != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> dp[len1][len2];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(len1==<span class="number">0</span> &amp;&amp; len2==<span class="number">0</span>)&#123;</div><div class="line">        dp[len1][len2]=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len1 == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">int</span> t = findMinSum(s1, s2, <span class="number">0</span>, len2 - <span class="number">1</span>, dp);</div><div class="line">        dp[<span class="number">0</span>][len2] = t + (<span class="keyword">int</span>)s2.charAt(len2 - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][len2];</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(len2 == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">int</span> t = findMinSum(s1,s2,len1-<span class="number">1</span>,<span class="number">0</span>,dp);</div><div class="line">        dp[len1][<span class="number">0</span>] = t + (<span class="keyword">int</span>)s1.charAt(len1 - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> dp[len1][<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(s1.charAt(len1 - <span class="number">1</span>) == s2.charAt(len2 - <span class="number">1</span>))&#123;</div><div class="line">        <span class="keyword">int</span> temp = findMinSum(s1,s2,len1 - <span class="number">1</span>,len2 - <span class="number">1</span>,dp);</div><div class="line">        dp[len1][len2]=temp;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">int</span> temp1 = findMinSum(s1, s2, len1, len2 - <span class="number">1</span>, dp);</div><div class="line">        <span class="keyword">int</span> temp2 = findMinSum(s1, s2, len1 - <span class="number">1</span>, len2, dp);</div><div class="line">        dp[len1][len2] = Math.min(temp1 + (<span class="keyword">int</span>)s2.charAt(len2 - <span class="number">1</span>),temp2 + (<span class="keyword">int</span>)s1.charAt(len1 - <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> dp[len1][len2];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CountRepetition]]></title>
      <url>/2017/11/02/CountRepetition/</url>
      <content type="html"><![CDATA[<p><strong>466. Count The Repetitions</strong></p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20171102111759.png" alt=""><br><a id="more"></a></p>
<p>首先这道题我非常喜欢，为什么呢，因为我没做出来，最后看一种复杂度非常低的答案时，发现思路完全一致，但是自己又差了一点点，每次差的这一点，反映出的依然是自己在算法方面的巨大不足。</p>
<pre><code>public class Solution {
public int getMaxRepetitions(String s1, int n1, String s2, int n2) {
    int count = 0;
    int k = 0;
    int index = 0; int repTime = 0;
    int[] rests = new int[200]; int[] reps = new int[200];
    while(k == count) {
        count++;
        for(int i = 0; i &lt; s1.length(); i++) {
            if(s1.charAt(i) == s2.charAt(index)) {
                index++;
                if(index == s2.length()) {
                    repTime++;
                    index = 0;
                }
            }
        }
        if(count &gt; n1) return repTime / n2;
        for(k = 0; k &lt;count; k++) {
            if(index == rests[k])
                break;
        }
        reps[count] = repTime;
        rests[count] = index;
    }
    int interval = count - k;
    int repeatCount = (n1 - k) / interval;
    int repeatTimes = repeatCount * (reps[count] - reps[k]);
    int remainTimes = reps[(n1 - k) % interval + k];
    return (repeatTimes + remainTimes) / n2;

    // int repeatCount = n1 / count;
    // int repeatTimes = repeatCount * reps[count];
    // int remainTimes = reps[n1 % count];
    // return (repeatTimes + remainTimes) / n2;
}
</code></pre><p>}</p>
<p>首先这道题，S1是由n个s1组合而成，S2是由m个s2组合而成，因此考虑S1最多可以构成多少个S2时，显然不需要考虑全部的S1和S2，而只需要考虑s1和s2。另外需要想到，</p>
<p><strong>一个s1和多个s1所能构成的s2可能并不是简单的倍数关系</strong></p>
<p><strong>当一个s1遍历一遍时，当s2的index相同时，可以认为构成了循环</strong></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Strange priter]]></title>
      <url>/2017/10/19/Strange-priter/</url>
      <content type="html"><![CDATA[<p><strong>664. Strange Printer</strong><br><img src="http://opeygftv2.bkt.clouddn.com/strangepriter.JPG" alt=""></p>
<p><strong>这道题的难度感觉是很大的</strong>，目前想到的方法是 <strong>&lt;O(n^3)</strong>,（其中n小于或等于字符串长度）是否存在更低时间复杂度，例如能否将某个维度降到logn级别还在进一步思考当中。<br>直接看代码<br><a id="more"></a></p>
<pre>
<code>
class Solution {
    public int strangePrinter(String s) {
        if (s.length() == 0) return 0;
        char[] sa = s.toCharArray();
        int n = 1;
        for (int i = 1; i < sa.length; ++i) {
            if (sa[i] == sa[n - 1]) continue;
            sa[n++] = sa[i];
        }
//去除数组当中的相邻且重复元素，降低数组长度，起到压缩数组的作用
        int[][] dp = new int[n][n];
        for (int j = 0; j < n; ++j) {
            dp[j][j] = 1;
            for (int i = j - 1; i >= 0; --i) {
                if (sa[i] == sa[j]) {
                    dp[i][j] = dp[i][j - 1];
                    continue;
                }
                dp[i][j] = dp[i][j - 1] + 1;
                for (int k = i + 1; k < j; ++k) {
                    if (sa[k] == sa[j]) {
                        if (dp[i][k - 1] + dp[k][j] < dp[i][j]) {
                            dp[i][j] = dp[i][j - 1];
                            break;
//算法当中不可能存在可以两次松弛的情况，因此可以直接break，减少循环次数
                        }
                    }
                }
            }
        }
        return dp[0][n - 1];
    }
}
</code>
</pre>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Matchstickes to Square]]></title>
      <url>/2017/09/15/Matchstickes-to-Square/</url>
      <content type="html"><![CDATA[<p><strong>473. Matchsticks to Square</strong></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Remove Invalid Parentheses]]></title>
      <url>/2017/09/13/Remove-Invalid-Parentheses/</url>
      <content type="html"><![CDATA[<p><strong>301. Remove Invalid Parentheses</strong><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913174831.png" alt=""><br><a id="more"></a><br>考虑使用DFS，通过递归顺序遍历字符串，其中当遍历到’(‘和’)’时，均存在将其加入字符串和抛弃掉两种情况</p>
<pre>
<code>
class Solution {
    public List<string> removeInvalidParentheses(String s) {
    int rmL = 0, rmR = 0;
    for (int i = 0; i < s.length(); i++) {
        if (s.charAt(i) == '(') {
            rmL++;
        } else if (s.charAt(i) == ')') {
            if (rmL != 0) {
                rmL--;
            } else {
                rmR++;
            }
        }
    }
    Set<string> res = new HashSet<>();
    dfs(s, 0, res, new StringBuilder(), rmL, rmR, 0);
    return new ArrayList<string>(res);
}

public void dfs(String s, int i, Set<string> res, StringBuilder sb, int rmL, int rmR, int open) {
    if (rmL < 0 || rmR < 0 || open < 0) {
        return;
    }
    if (i == s.length()) {
        if (rmL == 0 && rmR == 0 && open == 0) {
            res.add(sb.toString());
        }        
        return;
    }

    char c = s.charAt(i); 
    int len = sb.length();

    if (c == '(') {
        dfs(s, i + 1, res, sb, rmL - 1, rmR, open);            // not use (
        dfs(s, i + 1, res, sb.append(c), rmL, rmR, open + 1);       // use (

    } else if (c == ')') {
        dfs(s, i + 1, res, sb, rmL, rmR - 1, open);                // not use  )
        dfs(s, i + 1, res, sb.append(c), rmL, rmR, open - 1);          // use )

    } else {
        dfs(s, i + 1, res, sb.append(c), rmL, rmR, open);    
    }

    sb.setLength(len);        
}
}
</string></string></string></string></code>
</pre>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Binary Tree Maximum Path Sum]]></title>
      <url>/2017/09/13/Binary-Tree-Maximum-Path-Sum/</url>
      <content type="html"><![CDATA[<p><strong>124. Binary Tree Maximum Path Sum</strong><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913161221.png" alt=""><br>这道题需要注意的地方是二叉树节点值可能为负数，因此在确定是否将左右子树最大值引入时，应该同0进行比较，同时应在每个节点处判断是否以该节点作为Sequence的根节点。<br><a id="more"></a></p>
<pre>
<code>
class Solution {

    private int sum = Integer.MIN_VALUE;

    public int maxPathSum(TreeNode root) {
        if(root == null) return 0;
        maxPath(root);
        return sum;
    }
    public int maxPath(TreeNode root) {
        if(root == null) return 0;
        int sumLeft = Math.max(0, maxPath(root.left));
        int sumRight = Math.max(0, maxPath(root.right));
        sum = Math.max(sum,sumLeft + sumRight + root.val);
        return Math.max(sumLeft,sumRight) + root.val;
    }
}
</code>
</pre>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中序遍历的应用]]></title>
      <url>/2017/09/13/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>对于二叉树，当涉及到将二叉树转化为有序数组的问题时，应该首先考虑中序遍历和后序遍历。如题：<br><a id="more"></a><br><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913154630.png" alt=""><br>使用中序遍历：</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170913154706.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Algorithm </tag>
            
            <tag> BST </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最小高度树]]></title>
      <url>/2017/09/07/%E6%9C%80%E5%B0%8F%E9%AB%98%E5%BA%A6%E6%A0%91/</url>
      <content type="html"><![CDATA[<p><strong>310. Minimum Height Trees</strong><br><strong>For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.</strong><br><a id="more"></a><br>Format</p>
<p>The graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).</p>
<p>You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170907102600.png" alt=""></p>
<p>在已知树形结构求树根的问题，优先解决方案应该是BFS，从叶子节点逐层遍历，直到找到满足要求的树根</p>
<pre>
<code>
class Solution {
    public List<integer> findMinHeightTrees(int n, int[][] edges) {
        List<integer>[] adj =  (ArrayList<integer>[]) new ArrayList[n];
        for(int i = 0; i <n ;i++)="" adj[i]="new" arraylist<integer="">();
        List<integer> result = new ArrayList<integer>();
        if(n == 1){
            result.add(0);
            return result;
        }
        for(int[] edge : edges) {
            adj[edge[0]].add(edge[1]);
            adj[edge[1]].add(edge[0]);
        }
        for(int i =0 ;i < n; i++) {
            if(adj[i].size() == 1)
                result.add(i);
        }
        while(n > 2) {
            n -= result.size();
            List<integer> newResult = new ArrayList<integer>();
            for(int vertex : result) {
                int parent = adj[vertex].get(0);
                adj[parent].remove((Integer)vertex);
                if(adj[parent].size() == 1) newResult.add(parent);
            }
            result = newResult;           
        }
        return result;
    }
}
</integer></integer></integer></integer></n></integer></integer></integer></code>
</pre>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> DataStructure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[opendaylightplugin学习笔记（一）——StatisticsManager]]></title>
      <url>/2017/07/28/opendaylightplugin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94StatisticsManager-1/</url>
      <content type="html"><![CDATA[<p>@(Opendaylight)[openflowplugin|statistics-manager|beryllium]</p>
<h4 id="StatNodeRegistrationImpl"><a href="#StatNodeRegistrationImpl" class="headerlink" title="StatNodeRegistrationImpl"></a>StatNodeRegistrationImpl</h4><blockquote>
<p>StaNodeRegistrationImpl在铍版本似乎实现的是之前版本Inventory-Manager中NodeChangeCommit获取节点和端口信息的功能，也就说在铍版本，节点、端口信息获取和存储功能似乎从Inventory-mananger转移到了statistics-manager。有待于进一步证实。<br><a id="more"></a><br>所在包 org.opendaylight.openflowplugin.applications.statistics.manager<br>实现接口<br>org.opendaylight.openflowplugin.applications.statistics.manager.StatNodeRegistration<br>org.opendaylight.controller.md.sal.common.api.clustering.EntityOwnershipListenerRegistration<br>祖父接口<br><strong>org.opendaylight.yang.gen.v1.urn.opendaylight.inventory.rev130819.OpendaylightInventoryListener</strong><br>java.lang.AutoCloseable<br>org.opendaylight.yangtools.yang.binding.NotificationListener<br><strong>java.util.EventListener</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventListener</span></span></div></pre></td></tr></table></figure>
<p><strong>所有的事件侦听器必须拓展的标记接口</strong></p>
<h4 id="OpendaylightInventoryListener"><a href="#OpendaylightInventoryListener" class="headerlink" title="OpendaylightInventoryListener"></a>OpendaylightInventoryListener</h4><p>注册OpendaylightInvenrtoyListener监听器，当ODL控制器与openflow交换机建立连接时，或者断开连接，openflow交换机端口发生Down事件、Up事件时，会分别触发以下函数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNodeConnectorRemoved</span><span class="params">(NodeConnectorRemoved notification)</span></span>;</div><div class="line"><span class="comment">/*</span></div><div class="line">交换机端口Down事件</div><div class="line">一个NodeConnector被移除则发起通知，但并不会更改节点树。所描述的是一个节点被移除但基于某种原因节点树并没有被修改</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNodeRemoved</span><span class="params">(NodeRemoved notification)</span></span>;</div><div class="line"><span class="comment">/*</span></div><div class="line">交换机下线事件</div><div class="line">一个Node被移除则发起通知，但并不会更改节点树。所描述的是一个节点被移除但基于某种原因节点树并没有被修改</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNodeUpdated</span><span class="params">(NodeUpdated notification)</span></span>;</div><div class="line"><span class="comment">/*</span></div><div class="line">交换机上线事件</div><div class="line">一个Node被修改则发起通知，但并不会更改节点树。所描述的是一个节点被修改但基于某种原因节点树并没有被修改</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNodeConnectorUpdated</span><span class="params">(NodeConnectorUpdated notification)</span></span>;</div><div class="line"><span class="comment">/*</span></div><div class="line">交换机端口Up事件</div><div class="line">一个NodeConnector被修改则发起通知，但并不会更改节点树。所描述的是一个节点被修改但基于某种原因节点树并没有被修改</div><div class="line">*/</div></pre></td></tr></table></figure>
<h4 id="StatNotifyCommitPort（端口信息）"><a href="#StatNotifyCommitPort（端口信息）" class="headerlink" title="StatNotifyCommitPort（端口信息）"></a>StatNotifyCommitPort（端口信息）</h4><p>所在包org.opendaylight.openflowplugin.applications.statistics.manager.impl</p>
<blockquote>
<p>一个NotifyListener针对PortStatistics，所有期望或者注册的的PortStatistics将被提交给Datastore或者Operational</p>
</blockquote>
<h4 id="StatNotifyCommitTable（流表信息）"><a href="#StatNotifyCommitTable（流表信息）" class="headerlink" title="StatNotifyCommitTable（流表信息）"></a>StatNotifyCommitTable（流表信息）</h4><blockquote>
<p>同inventory-manager内的NodeTableFeatureCommit 功能是一致的</p>
</blockquote>
<p>所在包org.opendaylight.openflowplugin.applications.statistics.manager.impl<br>继承类StatAbstractNotifyCommit&lt;· N extends NotificationListener&gt;</p>
<h5 id="StatAbstractNotifyCommit-lt-·N-extends-NotificationListener-gt"><a href="#StatAbstractNotifyCommit-lt-·N-extends-NotificationListener-gt" class="headerlink" title="StatAbstractNotifyCommit&lt;·N extends NotificationListener&gt;"></a>StatAbstractNotifyCommit&lt;·N extends NotificationListener&gt;</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StatAbstractListenCommit</span><span class="params">(<span class="keyword">final</span> StatisticsManager manager, </span></span></div><div class="line"><span class="keyword">final</span> DataBroker db,<span class="keyword">final</span> NotificationProviderService nps, </div><div class="line"><span class="keyword">final</span> Class&lt;T&gt; clazz, <span class="keyword">final</span> StatNodeRegistration nodeRegistrationManager)</div></pre></td></tr></table></figure>
<blockquote>
<p>Class is abstract implementation for all no Configuration/DataStore DataObjects and represent common functionality for all DataObject Statistics Commiters.   Class defines contract between DataObject and relevant Statistics NotificationListener.</p>
</blockquote>
<p>继承祖父类StatNotifyCommiter&lt;·N&gt; </p>
<p>实现接口OpendaylightFlowTableStatisticsListener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OpendaylightFlowTableStatisticsListener</span></span></div><div class="line">    <span class="keyword">extends</span> <span class="title">NotificationListener</span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Receive flow table statistics update</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFlowTableStatisticsUpdate</span><span class="params">(FlowTableStatisticsUpdate notification)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Class is a NotifyListener for TableStatistics All expected (registered) tableStatistics will be builded and commit to Operational/DataStore</p>
</blockquote>
<h4 id="StatListenCommitMeter（Meter）"><a href="#StatListenCommitMeter（Meter）" class="headerlink" title="StatListenCommitMeter（Meter）"></a>StatListenCommitMeter（Meter）</h4><p>所在包org.opendaylight.openflowplugin.applications.statistics.manager.impl</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public StatListenCommitMeter(final StatisticsManager manager, final DataBroker db, final NotificationProviderService nps, final StatNodeRegistration nrm)</div></pre></td></tr></table></figure>
<blockquote>
<p>StatListenCommitMeter Class is a NotifyListener for MeterStatistics and DataChangeListener for Config/DataStore for Meter node. All expected (registered) MeterStatistics will be builded and commit to Operational/DataStore. DataChangeEven should call create/delete Meter in Operational/DS</p>
</blockquote>
<h4 id="StatListenCommitGroup（Group）"><a href="#StatListenCommitGroup（Group）" class="headerlink" title="StatListenCommitGroup（Group）"></a>StatListenCommitGroup（Group）</h4><p>所在包org.opendaylight.openflowplugin.applications.statistics.manager.impl</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">StatListenCommitGroup</span><span class="params">(<span class="keyword">final</span> StatisticsManager manager,  <span class="keyword">final</span> DataBroker db, <span class="keyword">final</span> NotificationProviderService nps,<span class="keyword">final</span> StatNodeRegistration nrm)</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>Class is a NotifyListener for GroupStatistics and DataChangeListener for Config/DataStore for Group node.All expected (registered) GroupStatistics will be builded and commit to Operational/DataStore. DataChangeEven should call create/delete Group in Operational/DS</p>
</blockquote>
<h4 id="Statistics-Manger"><a href="#Statistics-Manger" class="headerlink" title="Statistics.Manger"></a>Statistics.Manger</h4><blockquote>
<p>It represent a central point for whole module. Implementation <strong>DataStore的数据存储包含两种形式，分别为Config/DS和Operational/DS,config持有由应用所写的数据，oprational反映了设备实际的状态</strong><br>StatisticsManager registers all Operation/DS {@link StatNotifyCommiter} and Config/DS {@link StatListeningCommiter}, as well as {@link StatPermCollector} for statistic collecting and {@link StatRpcMsgManager} as Device RPCs provider. In next, StatisticsManager provides all DS contact Transaction services.<br><strong>即完成所有注册之后，提供所有的DataStore数据交互业务的服务</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 整个statistics-manager的入口函数</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> notifService</div><div class="line">    * <span class="doctag">@param</span> rpcRegistry</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> NotificationProviderService notifService,</span></span></div><div class="line">           <span class="keyword">final</span> RpcConsumerRegistry rpcRegistry);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Method provides read/write DataStore functionality cross applyOperation</div><div class="line">    * defined in &#123;<span class="doctag">@link</span> StatDataStoreOperation&#125;</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> inventoryOper - operation for DataStore</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">final</span> StatDataStoreOperation inventoryOper)</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Method wraps &#123;<span class="doctag">@link</span> StatisticsManager#isProvidedFlowNodeActive(InstanceIdentifier)&#125; method</div><div class="line">    * to provide parallel statCollection process for Set of Nodes. So it has to</div><div class="line">    * identify correct Node Set by NodeIdentifier</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> nodeIdent</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isProvidedFlowNodeActive</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method wraps &#123;<span class="doctag">@link</span> StatPermCollector&#125;.collectNextStatistics to provide</div><div class="line">     * parallel statCollection process for Set of Nodes. So it has to</div><div class="line">     * identify correct Node Set by NodeIdentifier.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> nodeIdent</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">collectNextStatistics</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent, TransactionId xid)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method wraps &#123;<span class="doctag">@link</span> StatPermCollector&#125;.connectedNodeRegistration to provide</div><div class="line">     * parallel statCollection process for Set of Nodes. So it has to</div><div class="line">     * connect node to new or not full Node statCollector Set.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> nodeIdent</div><div class="line">     * <span class="doctag">@param</span> statTypes</div><div class="line">     * <span class="doctag">@param</span> nrOfSwitchTables</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connectedNodeRegistration</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent,</span></span></div><div class="line">            List&lt;StatCapabTypes&gt; statTypes, Short nrOfSwitchTables);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method wraps &#123;<span class="doctag">@link</span> StatPermCollector&#125;.disconnectedNodeUnregistration to provide</div><div class="line">     * parallel statCollection process for Set of Nodes. So it has to identify</div><div class="line">     * correct collector for disconnect node.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> nodeIdent</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">disconnectedNodeUnregistration</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Method wraps &#123;<span class="doctag">@link</span> StatPermCollector&#125;.registerAdditionalNodeFeature to provide</div><div class="line">     * possibility to register additional Node Feature &#123;<span class="doctag">@link</span> StatCapabTypes&#125; for</div><div class="line">     * statistics collecting.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> nodeIdent</div><div class="line">     * <span class="doctag">@param</span> statCapab</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerAdditionalNodeFeature</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent, StatCapabTypes statCapab)</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Method wraps &#123;<span class="doctag">@link</span> StatPermCollector&#125;.unregisterNodeStats to provide</div><div class="line">    * possibility to unregister Node stats type &#123;<span class="doctag">@link</span> StatCapabTypes&#125; from</div><div class="line">    * statistics collecting.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> nodeIdent</div><div class="line">    * <span class="doctag">@param</span> statCapab</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">void</span> <span class="title">unregisterNodeStats</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeIdent, StatCapabTypes statCapab)</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Method provides access to Device RPC methods by wrapped</div><div class="line">    * internal method. In next &#123;<span class="doctag">@link</span> StatRpcMsgManager&#125; is registered all</div><div class="line">    * Multipart device msg response and joining all to be able run all</div><div class="line">    * collected statistics in one time (easy identification Data for delete)</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> StatRpcMsgManager&#125;</div><div class="line">    */</div><div class="line">   <span class="function">StatRpcMsgManager <span class="title">getRpcMsgManager</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : &#123;<span class="doctag">@link</span> org.opendaylight.yang.gen.v1.urn.opendaylight.flow.inventory.rev130819.FlowCapableNode&#125;</div><div class="line">    * Operational/DS data change listener -&amp;gt; impl. target -&amp;gt; register FlowCapableNode to Statistic Collecting process</div><div class="line">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> StatNodeRegistration&#125;</div><div class="line">    */</div><div class="line">   <span class="function">StatNodeRegistration <span class="title">getNodeRegistrator</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Flow Config/DS data change listener -&amp;gt; impl. target -&amp;gt;</div><div class="line">    * -&amp;gt; make pair between Config/DS FlowId and Device Flow response Hash</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatListeningCommiter&lt;Flow, OpendaylightFlowStatisticsListener&gt; <span class="title">getFlowListenComit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Meter Config/DS data change listener and Operation/DS notify commit</div><div class="line">    * functionality</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatListeningCommiter&lt;Meter, OpendaylightMeterStatisticsListener&gt; <span class="title">getMeterListenCommit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Group Config/DS data change listener and Operation/DS notify commit</div><div class="line">    * functionality</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatListeningCommiter&lt;Group, OpendaylightGroupStatisticsListener&gt; <span class="title">getGroupListenCommit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Queue Config/DS change listener and Operation/DS notify commit functionality</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatListeningCommiter&lt;Queue, OpendaylightQueueStatisticsListener&gt; <span class="title">getQueueNotifyCommit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Table Operation/DS notify commit functionality</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatNotifyCommiter&lt;OpendaylightFlowTableStatisticsListener&gt; <span class="title">getTableNotifCommit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Define Method : Port Operation/DS notify commit functionality</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function">StatNotifyCommiter&lt;OpendaylightPortStatisticsListener&gt; <span class="title">getPortNotifyCommit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="function">StatisticsManagerConfig <span class="title">getConfiguration</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * A unique UUID is generated with each node added by the statistics manager implementation in order to uniquely</div><div class="line">    * identify a session.</div><div class="line">    * <span class="doctag">@param</span> nodeInstanceIdentifier</div><div class="line">    */</div><div class="line">   <span class="function">UUID <span class="title">getGeneratedUUIDForNode</span><span class="params">(InstanceIdentifier&lt;Node&gt; nodeInstanceIdentifier)</span></span>;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SDN </tag>
            
            <tag> ODL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[opendaylightplugin学习笔记（二）——TopologyManager]]></title>
      <url>/2017/07/27/opendaylightplugin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94TopologyManager-1/</url>
      <content type="html"><![CDATA[<p><strong>topology-manager</strong>模块是作为<strong>openflowplugin</strong>的应用层程序（Applications），负责处理operational数据库下network-topology:network-topology数据节点（datastore数据库）的增删改查，例如ODL控制器发现添加一台主机host、新加主机与交换机的link链接等。显示拓扑的前端需要从该数据节点上获取主机或者交换机节点数据才能绘制网络拓扑图，构成拓扑图来源有两方面，一方面是通过LLDP发现的switch设备以及相关link连接，另一外面是通过L2switch的hosttracker模块发现的下挂在switch上的host主机以及相关连接。<br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SDN </tag>
            
            <tag> ODL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apriori]]></title>
      <url>/2017/07/16/Apriori/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> DataMining </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[netty之ChannelPipeline和ChannelHandler]]></title>
      <url>/2017/07/15/netty%E4%B9%8BChannelPipeline%E5%92%8CChannelHandler/</url>
      <content type="html"><![CDATA[<p>Netty的ChannelPipeline和ChannelHandler机制类似于Servlet和Filter过滤器，这类拦截器实际上是职责连模式的一种变形（Netty的三层架构分别为通信业务层，职责链，上层业务），主要是方便事件的拦截和用户业务逻辑的定制。<br><a id="more"></a><br>众所周知，Servlet Filter是JAVA Web应用程序级的java代码组件，它能够以声明的方式插入到HTTP请求响应的处理过程中，用于拦截请求和响应，以便能够查看、提取或以某种方式操作正在客户端和服务器之间交换的数据。拦截器封装了业务定制逻辑，能够实现对Web应用程序的预处理和事后处理。</p>
<p>过滤器提供了一种面向对象的模块化机制，用来将公共任务封装到可插入的组件中。这些组件通过Web部署配置文件(web.xml)进行声明，可以方便地添加或删除过滤器，无需改动任何应用程序代码或JSP页面，由Servlet进行动态调用。通过在请求、响应链中使用过滤器，可以对应用程序的Servlet或JSP页面提供的核心处理进行补充，而不破坏Servlet或JSP页面的功能。由于是纯Java实现，所以Servlet过滤器具有跨平台的可重用性，使得他们很容易被部署到任何符合Servlet规范的JEE环境中。</p>
<p>同样的，Netty将数据管道封装为一个ChannelPipeline，消息在ChannelPipeline中流动和传递，ChannelPipeline维护一个IO事件拦截器ChannelHandler链表并可实现迭代，通过新增和删除ChannelHandler来实现不同的业务逻辑定制。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Netty </tag>
            
            <tag> nio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小问题]]></title>
      <url>/2017/07/11/%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天吃饭的时候，问了自己一个问题，java反射到底是个啥，java反射可以实现啥？<br>自己稍微总结一下：</p>
<p><strong>java反射是在程序运行时，拿到一个类可以得到类的全部属性和方法，拿到一个对象，可以调用对象的全部属性和方法。</strong></p>
<p>java反射的作用：</p>
<ul>
<li>判断一个实例对象是否属于某个类</li>
<li>构造类的实例化对象</li>
<li>获取类的全部方法和属性</li>
<li>调用对象的全部方法和属性</li>
<li>动态代理 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发锁与条件变量]]></title>
      <url>/2017/07/09/%E5%B9%B6%E5%8F%91%E9%94%81%E4%B8%8E%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p>《Java 并发编程实践》一书给出了使用 ReentrantLock 的最佳时机：</p>
<p>当你需要以下高级特性时，才应该使用：<strong>可定时的</strong>、<strong>可轮询的</strong>与<strong>可中断的</strong>锁获取操作，<strong>公平队列</strong>，或者<strong>非块结构</strong>的锁。否则，请使用 synchronized</p>
<p><strong>互斥同步</strong>最主要的问题就是进行<strong>线程阻塞</strong>和<strong>唤醒</strong>所带来的性能问题，因而这种同步又称为阻塞同步，它属于一种悲观的并发策略，即线程获得的是独占锁。<strong>独占锁</strong>意味着其他线程只能依靠阻塞来等待线程释放锁。而在 CPU 转换线程阻塞时会引起线程上下文切换，当有很多线程竞争锁的时候，会引起 CPU 频繁的上下文切换导致效率很低。synchronized 采用的便是这种并发策略。<br><a id="more"></a><br>随着指令集的发展，我们有了另一种选择：基于冲突检测的乐观并发策略，通俗地讲就是先进性操作，如果没有其他线程争用共享数据，那操作就成功了，如果共享数据被争用，产生了冲突，那就再进行其他的补偿措施（最常见的补偿措施就是不断地重拾，直到试成功为止），这种乐观的并发策略的许多实现都不需要把线程挂起，因此这种同步被称为非阻塞同步。ReetrantLock 采用的便是这种并发策略。</p>
<p>在乐观的并发策略中，需要操作和冲突检测这两个步骤具备原子性，它靠硬件指令来保证，这里用的是 CAS 操作（Compare and Swap）。JDK1.5 之后，Java 程序才可以使用CAS操作。我们可以进一步研究 ReentrantLock 的源代码，会发现其中比较重要的获得锁的一个方法是 compareAndSetState，这里其实就是调用的 CPU 提供的特殊指令。现代的 CPU 提供了指令，可以自动更新共享数据，而且能够检测到其他线程的干扰，而 compareAndSet() 就用这些代替了锁定。这个算法称作非阻塞算法，意思是一个线程的失败或者挂起不应该影响其他线程的失败或挂起。</p>
<p>Java 5 中引入了注入 AutomicInteger、AutomicLong、AutomicReference 等特殊的原子性变量类，它们提供的如：compareAndSet()、incrementAndSet()和getAndIncrement()等方法都使用了 CAS 操作。因此，它们都是<strong>由硬件指令来保证的原子方法</strong>。</p>
<ul>
<li><strong>性能比较</strong></li>
</ul>
<p>基本语法上，ReentrantLock 与 synchronized 很相似，它们都具备一样的线程重入特性，只是代码写法上有点区别而已，一个表现为 API 层面的互斥锁（Lock），一个表现为原生语法层面的互斥锁（synchronized）。ReentrantLock 相对 synchronized 而言还是增加了一些高级功能，主要有以下三项：</p>
<ul>
<li><p>等待可中断：当持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待，改为处理其他事情，它对处理执行时间非常上的同步块很有帮助。而在等待由 synchronized 产生的互斥锁时，会一直阻塞，是不能被中断的。</p>
</li>
<li><p>可实现公平锁：多个线程在等待同一个锁时，必须按照申请锁的时间顺序排队等待，而非公平锁则不保证这点，在锁释放时，任何一个等待锁的线程都有机会获得锁。synchronized 中的锁时非公平锁，ReentrantLock 默认情况下也是非公平锁，但可以通过构造方法 <strong>ReentrantLock（ture）</strong>来要求使用公平锁。</p>
</li>
<li><p>锁可以绑定多个条件：ReentrantLock 对象可以同时绑定多个 Condition 对象（名曰：条件变量或条件队列），而在 synchronized 中，锁对象的 wait()和 notify()或 notifyAll()方法可以实现一个隐含条件，但如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而 ReentrantLock 则无需这么做，只需要多次调用 newCondition()方法即可。而且我们还可以通过绑定 Condition 对象来判断当前线程通知的是哪些线程（即与 Condition 对象绑定在一起的其他线程）。</p>
</li>
<li><p><strong>可中断锁</strong></p>
</li>
</ul>
<p>ReetrantLock 有两种锁：忽略中断锁和响应中断锁。忽略中断锁与 synchronized 实现的互斥锁一样，不能响应中断，而响应中断锁可以响应中断。</p>
<p>如果某一线程 A 正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程 B 不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，如果此时 ReetrantLock 提供的是忽略中断锁，则它不会去理会该中断，而是让线程B继续等待，而如果此时 ReetrantLock 提供的是响应中断锁，那么它便会处理中断，让线程 B 放弃等待，转而去处理其他事情。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Concurrent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[匈牙利算法]]></title>
      <url>/2017/07/06/%E5%8C%88%E7%89%99%E5%88%A9%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>二分图的最大匹配和完美匹配本质上还是最大网络流问题。<br>基于深度优先遍历实现</p>
<p><pre><code><br>public class Edmonds {<br>   private boolean[] used;<br>   private int[] girl;<br>   private int[][] path;<br><a id="more"></a><br>   private boolean[][] another;<br>  // private Queue<integer>[] queue ;<br>   @SuppressWarnings(“unchecked”)<br>public Edmonds(int Num){<br>    //   queue = (Queue<integer>[]) new Queue[Num];<br>       another = new boolean[Num][Num];<br>       used = new boolean[Num];<br>       Arrays.fill(used, false);<br>       girl = new int[Num];<br>       Arrays.fill(girl, -1);<br>       path = new int[Num][Num];<br>       for(int i = 0;i &lt; Num;i++){<br>           Arrays.fill(path[i], 0);<br>           Arrays.fill(another[i], false);<br>       }<br>   }<br>   public Edmonds(In in){<br>       this(in.readInt());<br>       for(int i = 0 ; i &lt; used.length; i++){<br>           for(int j = 0; j &lt; used.length; j++){<br>               path[i][j] = in.readInt();<br>           }<br>       }<br>   }</integer></integer></code></pre></p>
<p>   public boolean find(int x){<br>       for(int j = 0;j &lt; used.length;j++){<br>           if(path[x][j] == 1 &amp;&amp; !another[x][j]){<br>               if(!used[j]){<br>                   used[j] = true;<br>                   girl[j] = x;<br>                   another[x][j] = true;<br>                   return true;<br>               }<br>               else{<br>                 if(find(girl[j]))<br>                     return true;<br>               }<br>           }<br>       }<br>       return false;<br>   }<br>   public static void main(String[] args){<br>       In in = new In(args[0]);<br>       int num = 0;<br>       Edmonds edmonds = new Edmonds(in);<br>       for(int i = 0;i &lt; edmonds.used.length;i++){<br>           if(edmonds.find(i))<br>               num++;<br>       }<br>       System.out.println(“The perfect matching is :  “ + num);<br>   }<br><pre></pre></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最大网络流(Ford-Fulkerson)]]></title>
      <url>/2017/07/05/%E6%9C%80%E5%A4%A7%E7%BD%91%E7%BB%9C%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>关于最大网络流算法，网上的教程非常多，可以说形形色色，我个人也稍微做一下总结。<br>网络流算法与背包问题很相似，本质属于线性规划问题。首先需要明确的是容量和流量的两个概念，算法核心思想是从残余图中寻找增广路径直至增广路径不存在（增广路径：一条从源点到宿点的路径，所有的路路径流量为当前最小剩余流量）。穷举试错（DFS、BFS）的过程总是需要“反悔的”，我最开始不假思索想用栈回滚的方式。但Ford-Fulkerson算法很巧妙地利用了方向边，通过反向边的引入实际上实现了回溯。<br>这张图来自谢老师数据挖掘讲义，在此表示感谢。<br><a id="more"></a><br><img src="http://opeygftv2.bkt.clouddn.com/Max_flow.JPG" alt=""><br>Java实现</p>
<p><pre><code><br>public class FordFulkersonDemo {<br>    private int[][] Graph;<br>    private int[][] f;<br>    private int[][] r;<br>    private int[] parent;<br>    private int source;<br>    private int terminal;</code></pre></p>
<pre><code>public FordFulkersonDemo(int Num){
    Graph = new int[Num][Num];
    f = new int[Num][Num];
    r = new int[Num][Num];
    parent = new int[Num];
}
public FordFulkersonDemo(In in){
    this(in.readInt());
    for(int i = 0; i &lt; parent.length; i++){
        for(int j = 0; j &lt; parent.length; j++){
            Graph[i][j] = in.readInt();
        }
    }
    source = in.readInt();
    terminal = in.readInt();
}
private void initialization(){
    for(int i = 0; i &lt; parent.length; i++){
        Arrays.fill(f[i], 0);
    }
}

private int[][] residualNetwork(int[][] graph,int[][] f){
    int[][] r = new int[parent.length][parent.length];
    for(int i = 0; i &lt; parent.length; i++){
        for(int j = 0; j &lt; parent.length; j++){
            r[i][j] = graph[i][j] - f[i][j];
        }
    }
    return r;
}

private int argumentPath(int[][] r,int s,int t){
    Arrays.fill(parent, -1);
    Queue&lt;Integer&gt; q = new LinkedList&lt;Integer&gt;();
    int maxFlow = Integer.MAX_VALUE;
    q.add(s);
    parent[s] = s;
    while(!q.isEmpty()){
        int v = q.poll();
        if(v == t){
            while(v != s){
                if(maxFlow &gt; r[parent[v]][v])
                    maxFlow = r[parent[v]][v];
                v = parent[v];
            }
            break;
        }
            for(int i = 0 ; i &lt; parent.length; i++){
                if(i != v &amp;&amp; parent[i] == -1 &amp;&amp; r[v][i] &gt; 0){
                    parent[i] = v;
                    q.add(i);
                }
            }
        }

    if(parent[t] == -1){
        maxFlow = -1;
    }
    return maxFlow;
}

public int run(){
    int sum = 0;
    initialization();
    r = residualNetwork(Graph,f);
    int result = argumentPath(r,source,terminal);
    //int cur = terminal;
    while(result != -1){
        int cur = terminal;
        while(cur != source){
            f[parent[cur]][cur] += result;
            f[cur][parent[cur]] = -f[parent[cur]][cur];
            r[parent[cur]][cur] -= result;
            r[cur][parent[cur]] += result;
            cur = parent[cur];
        }
            sum += result;
        //    r = residualNetwork(Graph,f);
            result = argumentPath(r,source,terminal);
    }
    return sum;
}

public static void main(String[] args){
    In in = new In(args[0]);
    FordFulkersonDemo ford = new FordFulkersonDemo(in);
    System.out.println(ford.run());
}
</code></pre><p>}</p>
<p><br>在此验证一下程序的效果：<br><img src="http://opeygftv2.bkt.clouddn.com/MaxFlowDemo1.JPG" alt=""><br>程序运行后结果</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/result.JPG" alt=""><br><img src="http://opeygftv2.bkt.clouddn.com/MaxFlowDemo2.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[std::function]]></title>
      <url>/2017/07/04/std-function/</url>
      <content type="html"><![CDATA[<p>类模版<strong>std::function</strong>是一种通用、多态的函数封装。<strong>std::function</strong>的实例可以对任何可以调用的目标实体进行存储、复制、和调用操作，这些目标实体包括<strong>普通函数</strong>、<strong>Lambda表达式</strong>、<strong>函数指针</strong>、以及其它函数对象等。<strong>std::function</strong>对象是对C++中现有的可调用实体的一种类型安全的包裹（我们知道像函数指针这类可调用实体，是类型不安全的）。</p>
<p>通常<strong>std::function</strong>是一个函数对象类，它包装其它任意的函数对象，被包装的函数对象具有类型为T1, …,TN的N个参数，并且返回一个可转换到R类型的值。std::function使用 模板转换构造函数接收被包装的函数对象；特别是，闭包类型可以隐式地转换为std::function。<br><a id="more"></a><br>最简单的理解就是：</p>
<p><strong>通过std::function对C++中各种可调用实体（普通函数、Lambda表达式、函数指针、以及其它函数对象等）的封装，形成一个新的可调用的std::function对象；让我们不再纠结那么多的可调用实体。一切变的简单粗暴</strong>。</p>
<pre>
<code>
#include <functional>
#include <iostream>
using namespace std;

std::function< int(int)> Functional;

// 普通函数
int TestFunc(int a)
{
    return a;
}

// Lambda表达式
auto lambda = [](int a)->int { return a; };

// 仿函数(functor)
class Functor
{
public:
    int operator()(int a)
    {
        return a;
    }
};

// 1.类成员函数
// 2.类静态函数
class TestClass
{
public:
    int ClassMember(int a) { return a; }
    static int StaticMember(int a) { return a; }
};

int main()
{
    // 普通函数
    Functional = TestFunc;
    int result = Functional(10);
    cout << "普通函数：" << result << endl;

    // Lambda表达式
    Functional = lambda;
    result = Functional(20);
    cout << "Lambda表达式：" << result << endl;

    // 仿函数
    Functor testFunctor;
    Functional = testFunctor;
    result = Functional(30);
    cout << "仿函数：" << result << endl;

    // 类成员函数
    TestClass testObj;
    Functional = std::bind(&TestClass::ClassMember, testObj, std::placeholders::_1);
    result = Functional(40);
    cout << "类成员函数：" << result << endl;

    // 类静态函数
    Functional = TestClass::StaticMember;
    result = Functional(50);
    cout << "类静态函数：" << result << endl;
    system("pause");
    return 0;
}
</iostream></functional></code></pre>

<p>C++ lambda表达式：<br>C++11 的 lambda 表达式规范如下：</p>
<p>[ capture ] ( params ) mutable exception attribute -&gt; ret { body }    (1)    </p>
<p>[ capture ] ( params ) -&gt; ret { body }    (2)     </p>
<p>[ capture ] ( params ) { body }    (3)     </p>
<p>[ capture ] { body }    (4)<br>其中</p>
<p>(1) 是完整的 lambda 表达式形式，<br>(2) const 类型的 lambda 表达式，该类型的表达式不能改捕获(“capture”)列表中的值。<br>(3)省略了返回值类型的 lambda 表达式，但是该 lambda 表达式的返回类型可以按照下列规则推演出来：<br>如果 lambda 代码块中包含了 return 语句，则该 lambda 表达式的返回类型由 return 语句的返回类型确定。<br>如果没有 return 语句，则类似 void f(…) 函数。<br>省略了参数列表，类似于无参函数 f()。<br>mutable 修饰符说明 lambda 表达式体内的代码可以修改被捕获的变量，并且可以访问被捕获对象的 non-const 方法。</p>
<p>exception 说明 lambda 表达式是否抛出异常(noexcept)，以及抛出何种异常，类似于void f() throw(X, Y)。</p>
<p>attribute 用来声明属性。</p>
<p>另外，capture 指定了在可见域范围内 lambda 表达式的代码内可见得外部变量的列表，具体解释如下：</p>
<p>[a,&amp;b] a变量以值的方式呗捕获，b以引用的方式被捕获。<br>[this] 以值的方式捕获 this 指针。<br>[&amp;] 以引用的方式捕获所有的外部自动变量。<br>[=] 以值的方式捕获所有的外部自动变量。<br>[] 不捕获外部的任何变量。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[类加载器]]></title>
      <url>/2017/07/02/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>站在 Java 开发人员的角度来看，类加载器可以大致划分为以下三类：</p>
<p>启动类加载器：Bootstrap ClassLoader，跟上面相同。它负责加载存放在JDK\jre\li(JDK 代表 JDK 的安装目录，下同)下，或被-Xbootclasspath参数指定的路径中的，并且能被虚拟机识别的类库（如 rt.jar，所有的java.<em>开头的类均被 Bootstrap ClassLoader 加载）。启动类加载器是无法被 Java 程序直接引用的。<br><a id="more"></a><br>扩展类加载器：Extension ClassLoader，该加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载JDK\jre\lib\ext目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库（如javax.</em>开头的类），开发者可以直接使用扩展类加载器。</p>
<p>应用程序类加载器：Application ClassLoader，该类加载器由 sun.misc.Launcher$AppClassLoader 来实现，它负责加载用户类路径（ClassPath）所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。<br>应用程序都是由这三种类加载器互相配合进行加载的，如果有必要，我们还可以加入自定义的类加载器。因为 JVM 自带的 ClassLoader 只是懂得从本地文件系统加载标准的 java class 文件，因此如果编写了自己的 ClassLoader，便可以做到如下几点：</p>
<p>*在执行非置信代码之前，自动验证数字签名。</p>
<p>*动态地创建符合用户特定需要的定制化构建类。</p>
<p>*从特定的场所取得 java class，例如数据库中和网络中。</p>
<p>事实上当使用 Applet 的时候，就用到了特定的 ClassLoader，因为这时需要从网络上加载 java class，并且要检查相关的安全信息，应用服务器也大都使用了自定义的 ClassLoader 技术。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[弗洛伊德算法及证明]]></title>
      <url>/2017/07/02/%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E8%AF%81%E6%98%8E/</url>
      <content type="html"><![CDATA[<p>弗洛伊德算法属于动态规划问题，通过插点的方式为加权图多源点间寻求最短路径。算法引入两个二维数组path[][]和dist[][],其中dist[i][j]描述两个节点i和j间的最短路径，path[i][j]用来描述节点i和j之间最短路径所经过的节点。<br>首先，初始化非相邻节点dist为INF，得到初始矩阵S，如图所示。<br>在此鸣谢<a href="http://www.cnblogs.com/skywang12345所提供的图片" target="_blank" rel="external">http://www.cnblogs.com/skywang12345所提供的图片</a><br><img src="http://opeygftv2.bkt.clouddn.com/01.jpg" alt=""><br><a id="more"></a><br>依次一各个节点为中介节点，对矩阵S进行更新，规则为若dist[i][j] &gt; dist[i][k]+dist[k][j],则dist[i][j] = dist[i][k] + dist[k][j],path[i][j] = k ,如图所示<br><img src="http://opeygftv2.bkt.clouddn.com/02.jpg" alt=""></p>
<p>根据上述讨论，代码如下</p>
<p><pre><code><br>public class FloydDemo {<br>    private static int[] matrix;<br>    private static int[][] initMatrix;<br>    public FloydDemo(int Num,In in){<br>        matrix = new int[Num];<br>        initMatrix = new int[Num][Num];<br>        for(int i = 0; i &lt; matrix.length; i++){<br>            for(int j = 0; j &lt; matrix.length; j++){<br>                initMatrix[i][j] = in.readInt();<br>            }<br>        }<br>    }<br>    public void floyd(int[][] path,int[][] dist){<br>        for(int i = 0; i &lt; matrix.length; i++){<br>            for(int j = 0; j &lt; matrix.length; j++){<br>                dist[i][j] = initMatrix[i][j];<br>                path[i][j] = j;<br>            }<br>        }</code></pre></p>
<pre><code>    for(int k = 0; k &lt; matrix.length; k++){
        for(int i = 0; i &lt; matrix.length; i++){
            for(int j = 0; j &lt; matrix.length; j++){
                if(dist[i][j] &gt; dist[i][k] + dist[k][j]){
                    dist[i][j] = dist[i][k] + dist[k][j];
                    path[i][j] = k;
                }

            }
        }
    }        
     System.out.println(&quot;floyd: \n&quot;);
        for (int i = 0; i &lt; matrix.length; i++) {
            for (int j = 0; j &lt; matrix.length; j++)
                System.out.printf(&quot;%2d  &quot;, dist[i][j]);
            System.out.printf(&quot;\n&quot;);
        }
            }
public static void main(String[] args){
    In in = new In(args[0]);
    int Num = in.readInt();
    int[][] path = new int[Num][Num];
    int[][] dist = new int[Num][Num];
    new FloydDemo(Num,in).floyd(path,dist);
}
</code></pre><p>}<br><br>最终得到多源最短路径矩阵<br><img src="http://opeygftv2.bkt.clouddn.com/%E6%8D%95%E8%8E%B7.JPG" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ODL对packet_in消息的处理流程]]></title>
      <url>/2017/06/03/OpenFlowJava%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p><em>OpenFlowJava对PakcetIn消息的处理流程</em></p>
<p>(1)当交换机遇到无法识别，或者需要上报的数据包（reason字段），通过与OpenFlowJava建立连接，向控制器发送消息。<br><a id="more"></a><br>(2)OpenFlowJava库对这个数据包进行解析，将解析结果发送给OpenFlowPlugin</p>
<p>(3)OpenFlowPlugin将数据包发送给控制器平台，控制器将数据包转发给监听此类数据的网络应用</p>
<p>(4)网络应用根据收到的packet_in消息判断，如果需要将报文广播发送出去，则发送Packet_out消息给控制器</p>
<p>(5)控制器到OpenFlowPlugin</p>
<p>(6)OpenFlowPlugin到OpenFlowJava</p>
<p>(7)OpenFlowJava将消息序列化之后，通过与交换机的网络连接，将消息发送出去</p>
<p>(8)通过不断的packet_in消息的传送，网络应用学习到网络的拓扑关系，根据拓扑关系组织流表项，并将流表项写入DataStore</p>
<p>(9)流规则管理器读取到DataStore的流规则变化之后，读取新加的流表项</p>
<p>(10)流规则管理项读取到的流表项通过RPC调用发送给控制器</p>
<p>(11)控制器根据RPC对应的服务名称找到对应的OpenFlowPlugin，并将流表项发送给OpenFlowPlugin</p>
<p>(12)OpenFlowPlugin将消息封装为FlowMod消息，传送给OpenFlowJava</p>
<p>(13)OpenFlowJava将消息序列化之后，通过与交换机的网络连接，将消息发送出去</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SDN </tag>
            
            <tag> ODL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JVM 垃圾回收机制(二)——方法区回收]]></title>
      <url>/2017/05/13/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6-%E4%B8%80-%E2%80%94%E2%80%94%E6%96%B9%E6%B3%95%E5%8C%BA%E5%9B%9E%E6%94%B6/</url>
      <content type="html"><![CDATA[<p>方法区（HotSpot中的永久代）并非没有垃圾回收机制，只是永久代的垃圾回收效率远远低于新生代回收效率。<br>永久代中垃圾回收主要包括两部分：废弃常量和无用的类。回收废弃常量与回收java堆中的对象非常相似，但判断一个类是否是无用的类就比较麻烦，类需要同时满足一下三个条件，才能算是无用的类：<br><a id="more"></a></p>
<ul>
<li>该类所有的实例都已经被回收，即java堆中不存在该类的任何实例。</li>
<li>加载该类的ClassLoader已经被回收。</li>
<li>该类对应的java.lang.Class对象没有任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<p>在大量使用反射、动态代理、CGLib等ByteCode框架、动态生成JSP记忆OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能，以保证永久代永远不会溢出。</p>
<p>注：可以使用<strong>-verbose：class</strong>以及<strong>-XX:_TraceClassLoading、-XX:TraceClassUnLoading</strong>查看类加载和卸载信息</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> GC机制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[（译）JVM 垃圾回收机制(一)——新生代垃圾回收]]></title>
      <url>/2017/05/10/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><strong>原作者：PATRICK PESCHLOW</strong></p>
<p><strong>本文对原文有改动</strong></p>
<p>单纯从 JVM 的功能考虑，并不需要新生代，完全可以针对整个堆进行操作。新生代存在的唯一理由是优化垃圾回收 (GC) 的性能。更具体说，把堆划分为新生代和老年代有 2 个好处：简化了新对象的分配 (只在新生代分配内存)， 可以更有效的清除不再需要的对象 (即死对象)(新生代和老年代使用不同的 GC 算法)<br><a id="more"></a><br>通过广泛研究面向对象实现的应用，发现一个共同特点：很多对象的生存时间都很短。同时研究发现，新生对象很少引用生存时间长的对象。结合这 2 个特点，很明显 GC 会频繁访问新生对象，例如在堆中一个单独的区域，称之为新生代。在新生代中，GC 可以快速标记回收” 死对象”，而不需要扫描整个 Heap 中的存活一段时间的” 老对象”。</p>
<p>SUN/Oracle 的 HotSpot JVM 又把新生代进一步划分为 3 个区域：一个相对大点的区域，称为“伊甸园区 (Eden)”；两个相对小点的区域称为“From 幸存区 (survivor)” 和“To 幸存区 (survivor)”。按照规定，新对象会首先分配在 Eden 中 (如果新对象过大，会直接分配在老年代中)。在 GC 中，Eden 中的对象会被移动到 survivor 中，直至对象满足一定的年纪 (定义为熬过 GC 的次数)，会被移动到老年代(默认为15岁)。</p>
<p>基于大多数新生对象都会在 GC 中被收回的假设。新生代的 GC 使用复制算法。在 GC 前 To 幸存区 (survivor) 保持清空，对象保存在 Eden 和 From 幸存区 (survivor) 中，GC 运行时，Eden 中的幸存对象被复制到 To 幸存区 (survivor)。针对 From 幸存区 (survivor) 中的幸存对象，会考虑对象年龄，如果年龄没达到阀值 (tenuring threshold)，对象会被复制到 To 幸存区 (survivor)。如果达到阀值对象被复制到老年代。复制阶段完成后，Eden 和 From 幸存区中只保存死对象，可以视为清空。如果在Survivor空间中相同年龄所有对象大小的总和超过了Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。<br><img src="http://opeygftv2.bkt.clouddn.com/1.png" alt=""><br>上图演示 GC 过程，黄色表示死对象，绿色表示剩余空间，红色表示幸存对象</p>
<p>总结一下，对象一般出生在 Eden 区，年轻代 GC 过程中，对象在 2 个幸存区之间移动，如果对象存活到适当的年龄，会被移动到老年代。当对象在老年代死亡时，就需要更高级别的 GC，更重量级的 GC 算法 (复制算法不适用于老年代，因为没有多余的空间用于复制)</p>
<p>现在应该能理解为什么新生代大小非常重要了 (译者，有另外一种说法：新生代大小并不重要，影响 GC 的因素主要是幸存对象的数量)，如果新生代过小，会导致新生对象很快就晋升到老年代中，在老年代中对象很难被回收。如果新生代过大，会发生过多的复制过程。我们需要找到一个合适大小，不幸的是，要想获得一个合适的大小，只能通过不断的测试调优。这就需要 JVM 参数了</p>
<p><strong>-XX:NewSize and -XX:MaxNewSize</strong></p>
<p>就像可以通过参数 (-Xms and -Xmx) 指定堆大小一样，可以通过参数指定新生代大小。设置 XX:MaxNewSize 参数时，应该考虑到新生代只是整个堆的一部分，新生代设置的越大，老年代区域就会减少。一般不允许新生代比老年代还大，因为要考虑 GC 时最坏情况，所有对象都晋升到老年代。(译者: 会发生 OOM 错误) -XX:MaxNewSize 最大可以设置为 - Xmx/2。</p>
<p>考虑性能，一般会通过参数 -XX:NewSize 设置新生代初始大小。如果知道新生代初始分配的对象大小 (经过监控)，这样设置会有帮助，可以节省新生代自动扩展的消耗。</p>
<p><strong>-XX:NewRatio</strong></p>
<p>可以设置新生代和老年代的相对大小。这种方式的优点是新生代大小会随着整个堆大小动态扩展。参数 -XX:NewRatio 设置老年代与新生代的比例。例如 -XX:NewRatio=3 指定老年代 / 新生代为 3/1。 老年代占堆大小的 3/4，新生代占 1/4 。</p>
<p>如果针对新生代，同时定义绝对值和相对值，绝对值将起作用。下面例子：</p>
<p><code>$ java -XX:NewSize=32m -XX:MaxNewSize=512m -XX:NewRatio=3 MyApp</code></p>
<p>以上设置，JVM 会尝试为新生代分配四分之一的堆大小，但不会小于 32MB 或大于 521MB</p>
<p>在设置新生代大小问题上，使用绝对值还是相对值，不存在通用准则 。如果了解应用的内存使用情况， 设置固定大小的堆和新生代更有利，当然也可以设置相对值。如果对应用的内存使用一无所知，正确的做法是不要设置任何参数，如果应用运行良好。很好，我们不用做任何额外动作。如果遇到性能或 OutOfMemoryErrors，在调优之前，首先需要进行一系列有目的的监控测试，缩小问题的根源。</p>
<p><strong>-XX:SurvivorRatio</strong></p>
<p>参数 -XX:SurvivorRatio 与 -XX:NewRatio 类似，作用于新生代内部区域。-XX:SurvivorRatio 指定伊甸园区 (Eden) 与幸存区大小比例。 例如， -XX:SurvivorRatio=10 表示伊甸园区 (Eden) 是 幸存区 To 大小的 10 倍 (也是幸存区 From 的 10 倍)。 所以， 伊甸园区 (Eden) 占新生代大小的 10/12， 幸存区 From 和幸存区 To 每个占新生代的 1/12 。 注意， 两个幸存区永远是一样大的。</p>
<p>设定幸存区大小有什么作用? 假设幸存区相对伊甸园区 (Eden) 太小， 相应新生对象的伊甸园区 (Eden) 永远很大空间， 我们当然希望， 如果这些对象在 GC 时全部被回收， 伊甸园区 (Eden) 被清空， 一切正常。 然而， 如果有一部分对象在 GC 中幸存下来， 幸存区只有很少空间容纳这些对象。 结果大部分幸存对象在一次 GC 后，就会被转移到老年代 ， 这并不是我们希望的。 考虑相反情况， 假设幸存区相对伊甸园区 (Eden) 太大， 当然有足够的空间，容纳 GC 后的幸存对象。 但是过小的伊甸园区 (Eden)， 意味着空间将越快耗尽，增加新生代 GC 次数，这是不可接受的。</p>
<p>总之， 我们希望最小化短命对象晋升到老年代的数量，同时也希望最小化新生代 GC 的次数和持续时间。 我们需要找到针对当前应用的折中方案， 寻找适合方案的起点是 了解当前应用中对象的年龄分布情况。</p>
<p>-XX:+PrintTenuringDistribution</p>
<p>参数 -XX:+PrintTenuringDistribution 指定 JVM 在每次新生代 GC 时，输出幸存区中对象的年龄分布。例如:</p>
<p><pre><code><br>Desired survivor size 75497472 bytes， new threshold 15 (max 15)<br>age 1: 19321624 bytes， 19321624 total<br>age 2: 79376 bytes， 19401000 total<br>age 3: 2904256 bytes， 22305256 total<br></code></pre><br>第一行说明幸存区 To 大小为 75 MB。 也有关于老年代阀值 (tenuring threshold) 的信息， 老年代阀值，意思是对象从新生代移动到老年代之前，经过几次 GC(即， 对象晋升前的最大年龄)。 上例中， 老年代阀值为 15， 最大也是 15。</p>
<p>之后行表示，对于小于老年代阀值的每一个对象年龄，本年龄中对象所占字节 (如果当前年龄没有对象， 这一行会忽略)。 上例中， 一次 GC 后幸存对象大约 19 MB， 两次 GC 后幸存对象大约 79 KB，三次 GC 后幸存对象大约 3 MB 。 每行结尾，显示直到本年龄全部对象大小。 所以， 最后一行的 total 表示幸存区 To 总共被占用 22 MB 。 幸存区 To 总大小为 75 MB ， 当前老年代阀值为 15，可以断定在本次 GC 中，没有对象会移动到老年代。现在假设下一次 GC 输出为：</p>
<p><pre><code><br>Desired survivor size 75497472 bytes， new threshold 2 (max 15)<br>age 1: 68407384 bytes， 68407384 total<br>age 2: 12494576 bytes， 80901960 total<br>age 3: 79376 bytes， 80981336 total<br>age 4: 2904256 bytes， 83885592 total<br></code></pre><br>对比前一次老年代分布。明显的， 年龄 2 和年龄 3 的对象还保持在幸存区中，因为我们看到年龄 3 和 4 的对象大小与前一次年龄 2 和 3 的相同。同时发现幸存区中， 有一部分对象已经被回收， 因为本次年龄 2 的对象大小为 12MB ，而前一次年龄 1 的对象大小为 19 MB。最后可以看到最近的 GC 中，有 68 MB 新对象，从伊甸园区移动到幸存区。</p>
<p>注意， 本次 GC 幸存区占用总大小 84 MB - 大于 75 MB。 结果， JVM 把老年代阀值从 15 降低到 2，在下次 GC 时，一部分对象会强制离开幸存区，这些对象可能会被回收 (如果他们刚好死亡) 或移动到老年代。</p>
<p><strong>-XX:InitialTenuringThreshold， -XX:MaxTenuringThreshold and -XX:TargetSurvivorRatio</strong></p>
<p>参数 -XX:+PrintTenuringDistribution 输出中的部分值可以通过其它参数控制。通过 -XX:InitialTenuringThreshold 和 -XX:MaxTenuringThreshold 可以设定老年代阀值的初始值和最大值。另外， 可以通过参数 -XX:TargetSurvivorRatio 设定幸存区的目标使用率。 例如， -XX:MaxTenuringThreshold=10 -XX:TargetSurvivorRatio=90 设定老年代阀值的上限为 10， 幸存区空间目标使用率为 90%。</p>
<p>有多种方式， 设置新生代行为，没有通用准则。我们必须清楚以下 2 中情况：</p>
<ul>
<li>如果从年龄分布中发现，有很多对象的年龄持续增长，在到达老年代阀值之前。这表示 -XX:MaxTenuringThreshold 设置过大</li>
<li>如果 -XX:MaxTenuringThreshold 的值大于 1，但是很多对象年龄从未大于 1。应该看下幸存区的目标使用率。如果幸存区使用率从未到达，这表示对象都被 GC 回收，这正是我们想要的。 如果幸存区使用率经常达到，有些年龄超过 1 的对象被移动到老年代中。这种情况，可以尝试调整幸存区大小或目标使用率。<br><strong>-XX:+NeverTenure and -XX:+AlwaysTenure</strong></li>
</ul>
<p>最后，我们介绍 2 个颇为少见的参数，对应 2 种极端的新生代 GC 情况。设置参数 -XX:+NeverTenure，对象永远不会晋升到老年代。当我们确定不需要老年代时，可以这样设置。这样设置风险很大， 并且会浪费至少一半的堆内存。相反设置参数 -XX:+AlwaysTenure，表示没有幸存区，所有对象在第一次 GC 时，会晋升到老年代。</p>
<p>没有合理的场景使用这个参数。可以在测试环境中，看下这样设置会发生什么有趣的事。但是并不推荐使用这些参数。</p>
<p>结论 适当的配置新生代非常重要，有相当多的参数可以设置新生代。然而，单独调整新生代，而不考虑老年代是不可能优化成功的。当调整堆和 GC 设置时，我们总是应该同时考虑新生代和老年代。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> GC机制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[容器技术与虚拟机]]></title>
      <url>/2017/05/04/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E4%B8%8E%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<p>云计算的本质是集中资源再分配，再分配的过程就是资源的逻辑划分，提供资源抽象的实现方式。其中主要涉及两个方面，资源控制和资源隔离。</p>
<p>居然一直都无法准确表述镜像的概念，所谓镜像，包括各种打包的Apps、系统使用进程、应用软件、shell以及公用函数库。</p>
<h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><a id="more"></a>
<p><img src="http://opeygftv2.bkt.clouddn.com/blog_%E5%9B%BE%E7%89%871.png" alt=""></p>
<p>虚拟机的Guest OS即为虚拟机安装的操作系统，它是一个完整操作系统内核；虚拟机的Hypervisor层可以简单理解为一个硬件虚拟化平台(VMW、VirtualBox)，它在Host OS是以内核态的驱动存在的。<br>虚拟机实现<strong>资源隔离</strong>的方法是利用独立的OS，并利用Hypervisor虚拟化CPU、内存、IO设备等实现的。</p>
<ul>
<li><p>为了虚拟CPU，Hypervisor会为每个虚拟的CPU创建一个<strong>数据结构</strong>，模拟CPU的全部寄存器的值，在适当的时候跟踪并修改这些值。需要指出的是在大多数情况下，虚拟机软件代码是直接跑在硬件上的，而不需要Hypervisor介入。只有在一些权限高的请求下，Guest OS需要运行内核态修改CPU的寄存器数据，Hypervisor会介入，修改并维护虚拟的CPU状态。 </p>
</li>
<li><p>Hypervisor虚拟化内存的方法是创建一个shadow page table。正常的情况下，一个page table可以用来实现从虚拟内存到物理内存的翻译。在虚拟化的情况下，由于所谓的物理内存仍然是虚拟的，因此shadow page table就要做到：<strong>虚拟内存-&gt;虚拟的物理内存-&gt;真正的物理内存</strong>。 </p>
</li>
<li><p>对于IO设备虚拟化，当Hypervisor接到page fault，并发现实际上虚拟的物理内存地址对应的是一个I/O设备，Hypervisor就用软件模拟这个设备的工作情况，并返回。比如当CPU想要写磁盘时，Hypervisor就把相应的数据写到一个host OS的文件上，这个文件实际上就模拟了虚拟的磁盘。 </p>
</li>
</ul>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>容器技术的出现远远早于Docker，Docker只是提供了一个能够方便管理容器的工具并为其提供了标准。Docker相当于把应用以及应用所依赖的环境完整打成一个包，这个包不管拿到哪里都能够原生运行。</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/blog_%E5%9B%BE%E7%89%872.png" alt=""></p>
<p>docker Engine可以简单看成对Linux的NameSpace、Cgroup、镜像管理文件系统操作的封装。docker并没有和虚拟机一样利用一个完全独立的Guest OS实现环境隔离，它利用的是目前Linux内核本身支持的容器方式,主要是Namespace和CGroup来实现资源和环境隔离。其中namespace实现系统环境的隔离，Cgroup实现资源限制，而利用镜像实现根目录环境的隔离。</p>
<p>通过docker和虚拟机实现原理的比较，我们大致可以得出一些结论： </p>
<ul>
<li>docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化，运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有优势。在IO设备虚拟化上，docker的镜像管理有多种方案，比如利用Aufs文件系统或者Device Mapper实现docker的文件管理，各种实现方案的效率略有不同。 </li>
<li>docker利用的是宿主机的内核，而不需要Guest OS。因此，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。我们知道，引导、加载操作系统内核是一个比较费时费资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，这个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统，则省略了这个过程，因此新建一个docker容器只需要几秒钟。另外，现代操作系统是复杂的系统，在一台物理机上新增加一个操作系统的资源开销是比较大的，因此，docker对比虚拟机在资源消耗上也占有比较大的优势。事实上，在一台物理机上我们可以很容易建立成百上千的容器，而只能建立几个虚拟机。</li>
</ul>
<h1 id="CGroup与Namespace"><a href="#CGroup与Namespace" class="headerlink" title="CGroup与Namespace"></a>CGroup与Namespace</h1><ul>
<li>CGroup<br>将一组进程放在一个控制组里，通过给这个控制组分配指定的可用资源，达到控制这一组进程可用资源的目的。</li>
<li>Namespace<br>Namespace是将内核的全局资源做封装，使得每个Namespace都有一份独立的资源，因此不同的进程在各自的Namespace内对同一种资源的实用不会相互干扰。Linux总共实现了6种Namespace：<ul>
<li>IPC：隔离System VIPC和POSIX消息队列</li>
<li>Network ： 隔离网络资源</li>
<li>Mount  隔离文件系统挂载点</li>
<li>PID  ：隔离进程ID</li>
<li>UTS ：隔离主机名和域名</li>
<li>User ：隔离用户ID和组ID </li>
</ul>
</li>
</ul>
<p>容器 = CGroup + NameSpace+rootfs+容器引擎</p>
<p>rootfs：文件隔离控制<br>容器引擎： 生命周期控制</p>
<h1 id="Docker与虚拟机的优劣"><a href="#Docker与虚拟机的优劣" class="headerlink" title="Docker与虚拟机的优劣"></a>Docker与虚拟机的优劣</h1><ul>
<li><p>虚拟机</p>
<ul>
<li>由于虚拟机镜像必须依赖于Guest OS这一庞大的内核，因此十分臃肿，无法在一台物理主机上大量建立</li>
<li>由于虚拟机启动前必须先启动Guest OS,因此，创建和启动的时间开销大</li>
<li>使用虚拟资源会存在资源损耗</li>
<li>部署密度小</li>
</ul>
</li>
<li><p>Docker优势</p>
<ul>
<li>镜像体积小，只包括apps以及所依赖的环境，没有内核</li>
<li>创建启动时间开销小</li>
<li>没有Guest OS和hypervisor，无额外资源开销，资源控制粒度小，部署密度大</li>
<li>使用的是真实的物力资源，不存在资源损耗</li>
</ul>
</li>
<li><p>Docker劣势<br>docker的劣势</p>
<ul>
<li>资源隔离方面不如虚拟机，docker是利用cgroup实现资源限制的，只能限制资源消耗的最大值，而不能隔绝其他程序占用自己的资源。 </li>
<li>安全性问题。docker目前并不能分辨具体执行指令的用户，只要一个用户拥有执行docker的权限，那么他就可以对docker的容器进行所有操作，不管该容器是否是由该用户创建。比如A和B都拥有执行docker的权限，由于docker的server端并不会具体判断docker cline是由哪个用户发起的，A可以删除B创建的容器，存在一定的安全风险。 </li>
<li>docker目前还在版本的快速更新中，细节功能调整比较大。一些核心模块依赖于高版本内核，存在版本兼容问题</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[春华秋实]]></title>
      <url>/2017/05/03/%E6%98%A5%E5%8D%8E%E7%A7%8B%E5%AE%9E/</url>
      <content type="html"><![CDATA[<p><img src="http://opeygftv2.bkt.clouddn.com/_DSC1096_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><a id="more"></a><br><img src="http://opeygftv2.bkt.clouddn.com/_DSC1072_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><img src="http://opeygftv2.bkt.clouddn.com/_DSC1102_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><img src="http://opeygftv2.bkt.clouddn.com/_DSC1089_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><img src="http://opeygftv2.bkt.clouddn.com/_DSC1110_%E5%89%AF%E6%9C%AC.jpg" alt=""><br><img src="http://opeygftv2.bkt.clouddn.com/_DSC1157_%E5%89%AF%E6%9C%AC.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> travelog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[斐波那契堆]]></title>
      <url>/2017/05/02/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86/</url>
      <content type="html"><![CDATA[<p><img src="http://opeygftv2.bkt.clouddn.com/829863-20160104171120950-2110922480.png" alt=""><br><a id="more"></a><br>一个斐波那契堆具有如下性质：</p>
<p>堆有一组有序树组成，但是堆中的树不一定是二项树</p>
<p>斐波那契堆中的树之间是无序的（二项堆中的树是按照其包含的二项树的度数排序的）</p>
<p>堆中每个节点的数据结构包含如下域：</p>
<p>指向其父节点的指针域</p>
<p>指向其任意一个孩子的指针域</p>
<p>任意一个节点x的所有孩子被链接在一个双向链表环形链表中</p>
<p>节点x中保存有它的孩子的数目degree</p>
<p>节点x中存在一个域mark，用于表示自从x上一次称为另一个节点的子女以来，它是否失掉了一个孩子，TRUE表示是失去了，FALSE表示未失去<br>斐波那契堆中的所有树的树根被保存在一个链表即根表中<br>对于一个斐波那契堆，min[H]保存了具有最小节点值的根节点<br>在计算机科学中，斐波那契堆是由树的集合所组成的堆数据结构。它比二项堆的平摊运行时间更好。斐波那契堆的名字来自于斐波那契数列，这些数列被用来做运行时间分析。</p>
<p>求最小值(find-mininum), 插入(insert), 降低元素值(decrease-key)和合并(merge/union)可以在常数平摊时间内完成。删除(delete)和删除最小值(delete minimun)可以在O(log n)平摊时间内完成。</p>
<p>在优先队列(priority queues)中使用斐波那契堆可以提升重要算法的渐进运行时间，例如Dijkstra算法，该算法用来计算一个图中两个结点的最短的距离。</p>
<p>斐波那契堆是由一些树的集合所组成，其中每一棵树都满足最小堆(minimum-heap)的属性，也就是说树中每个子结点的值都大于或者等于其父结点的值，而最小值则处在根结点上。</p>
<p>与二项堆不同，斐波那契堆中的树更加灵活，没有规定的形状，在极端情况下，堆中每个元素都是一棵单独的树。这种灵活性使得一些操作可以以“偷懒”的方式来执行，而“剩下”的工作将推迟到后面的操作中来完成。比如堆的合并仅仅将由树所组成的链表链接起来，而降低元素值(decrease key)有时直接从父结点中剪断而形成一棵新树。</p>
<p>下面给出斐波那契堆中关键的量值：</p>
<p>degree[x]:degree[x]: 表示结点x的子结点个数</p>
<p>mark[x]:mark[x]: 一个结点是否被marked了（当执行decrease key操作时会用到）</p>
<p>t(H):t(H): 表示堆中树的个数</p>
<p>m(H):m(H): 表示被marked的结点数量</p>
<p>Φ(H)=t(H)+2m(H):Φ(H)=t(H)+2m(H): 表示势函数</p>
<p>如下图所示：<br>从图中可以看出，一共有5棵树，即t(H)=5t(H)=5，最小值的指针指向元素值为3的根结点，在这棵包含最小值的树中，根结点有3个子结点，所以其degree等于3，整个斐波那契堆用 H 来表示。其中黑色表示被marked了，灰色表示没有被marked，所以m(H)=3m(H)=3，势函数 Φ(H)=t(H)+2m(H)=5+2∗3=11Φ(H)=t(H)+2m(H)=5+2∗3=11</p>
<p><img src="http://opeygftv2.bkt.clouddn.com/20131028210633593.gif" alt=""></p>
<pre><code>
Make-Fibonacci-Heap()
n[H] := 0
min[H] := NIL 
return H

Fibonacci-Heap-Minimum(H)
return min[H]

Fibonacci-Heap-Link(H,y,x)
remove y from the root list of H
make y a child of x
degree[x] := degree[x] + 1
mark[y] := FALSE

CONSOLIDATE(H)
for i:=0 to D(n[H])
     Do A[i] := NIL
for each node w in the root list of H
    do x:= w
       d:= degree[x]
       while A[d] <> NIL
           do y:=A[d]
              if key[x]>key[y]
                then exchange x<->y
              Fibonacci-Heap-Link(H, y, x)
              A[d]:=NIL
             d:=d+1
       A[d]:=x
min[H]:=NIL
for i:=0 to D(n[H])
    do if A[i]<> NIL
          then add A[i] to the root list of H
               if min[H] = NIL or key[A[i]]<key[min[h]] then="" min[h]:="A[i]" fibonacci-heap-union(h1,h2)="" h="" :="Make-Fibonacci-Heap()" min[h]="" concatenate="" the="" root="" list="" of="" h2="" with="" if="" (min[h1]="NIL)" or="" (min[h2]="" <=""> NIL and min[H2] < min[H1])
   then min[H] := min[H2]
n[H] := n[H1] + n[H2]
free the objects H1 and H2
return H


Fibonacci-Heap-Insert(H,x)
degree[x] := 0
p[x] := NIL
child[x] := NIL
left[x] := x
right[x] := x
mark[x] := FALSE
concatenate the root list containing x with root list H
if min[H] = NIL or key[x]<key[min[h]] then="" min[h]="" :="x" n[h]:="n[H]+1" fibonacci-heap-extract-min(h)="" z:="min[H]" if="" x="" <=""> NIL
        then for each child x of z
             do add x to the root list of H
                p[x]:= NIL
             remove z from the root list of H
             if z = right[z]
                then min[H]:=NIL
                else min[H]:=right[z]
                     CONSOLIDATE(H)
             n[H] := n[H]-1
return z

Fibonacci-Heap-Decrease-Key(H,x,k)
if k > key[x]
   then error "new key is greater than current key"
key[x] := k
y := p[x]
if y <> NIL and key[x]<key[y] then="" cut(h,="" x,="" y)="" cascading-cut(h,y)="" if="" key[x]<key[min[h]]="" min[h]="" :="x" cut(h,x,y)="" remove="" x="" from="" the="" child="" list="" of="" y,="" decrementing="" degree[y]="" add="" to="" root="" h="" p[x]:="NIL" mark[x]:="FALSE" z:="p[y]" z="" <=""> NIL
  then if mark[y] = FALSE
       then mark[y]:= TRUE
       else CUT(H, y, z)
            CASCADING-CUT(H, z)

Fibonacci-Heap-Delete(H,x)
Fibonacci-Heap-Decrease-Key(H,x,-infinity)
Fibonacci-Heap-Extract-Min(H)
 </key[y]></key[min[h]]></key[min[h]]></-></code></pre>

<p>关于斐波那契堆的操作具体参见<br><a href="http://gdeepak.com/IADSA/L22binomialfibonacciheaps.pdf" target="_blank" rel="external">http://gdeepak.com/IADSA/L22binomialfibonacciheaps.pdf</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Latch]]></title>
      <url>/2017/04/28/Latch/</url>
      <content type="html"><![CDATA[<p>#Latch</p>
<p><strong>同步工具</strong>类除了最熟悉的阻塞队列之外，还包括<strong>Semaphore、Barrier</strong>以及<strong>Latch</strong>。同样，我们也可以创建属于自己的同步工具类。所有的同步工具类都包含了一些特定的结构属性：比如，封装了一些状态，而这些状态将决定执行同步工具类的线程是继续执行还是等待，除此而外，还提供了一些方法对状态进行操作，以及高效的等待同步工具类进入到预期的状态。<br><a id="more"></a><br><strong>闭锁</strong>最形象的比喻是一扇Gate，在闭锁到达结束状态之前，这扇门始终处于关闭的状态，任何线程都无法通过。而当闭锁到达结束状态，这扇门将打开，进而允许所有的线程通过。一旦闭锁达到结束状态，这扇门将保持打开的状态，不会再关闭。换句话说，闭锁的作用是保持某些活动直到其他活动都完成才继续执行。<br>举个例子，我们都知道并发在某些情况下，可以极大地提升工作效率，缩短程序的运行时间，那么我们该如何去获取并发程序准确的运行时间，即在所有线程全部就绪的时刻启动时间，而在所有线程全部结束的时刻终止时间。Latch可以做到，看下面程序。</p>
<pre><code><java>
public class TestHarness {
    public static String timeTask(int nThreads,final Runnable[] tasks) throws InterruptedException{
        final CountDownLatch startGate=new CountDownLatch(1);
        final CountDownLatch endGate=new CountDownLatch(nThreads);
        for(Runnable task:tasks){
            Thread t=new Thread(){
                public void run(){
                    try{
                        startGate.await();
                        try{
                            task.run();
                        }finally{
                            //每个线程最终最后执行将endGate减1
                            endGate.countDown();

                        }
                    }catch(InterruptedException e){

                    }
                }
            };
            t.start();
        }
        long startTime=System.nanoTime();
        startGate.countDown();
        endGate.await();
        long endTime=System.nanoTime();
        return "Time: "+(endTime-startTime)+"ns";
    }
</java></code></pre>

<p>由于startGate被设置为等待</p>
<p><code>startGate.await();</code></p>
<p>因此每个线程首先要做的工作就是在启动门上等待，直到所有的线程全部就绪。并且，我们在为每个线程装载任务时</p>
<p><code>finally{endGate.countDown();}</code></p>
<p>保证没个线程最终都会执行使得endGate减1的任务</p>
<p><code>startGate.countDown();</code></p>
<p>注意startGate的初值为1，因此调用countDown方法后，门打开，此时线程开始执行</p>
<p><code>endGate.await();</code></p>
<p>endGate此时关闭，要做的工作就是等待且为零的时刻，然后打开</p>
<p>如果没用使用Latch工具而去获取并行线程的运行时间，线程在被创建之后将立即执行，显然，先启动的线程势必会领先于后启动的线程，并且活跃线程的数量会随着时间的推移而慢慢减少或者增加，竞争程度也将发生变化。有了这个工具，我们今后在编写并发程序是，只需要调用timeTasks函数，并向其传递任务参数，就可以获取并发时间了。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[五月任务计划]]></title>
      <url>/2017/04/28/%E4%BA%94%E6%9C%88%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92/</url>
      <content type="html"><![CDATA[<p>###技术目标</p>
<ul>
<li>深入研究<strong>OSGi</strong>，理解java模块化编程，以及OSGi如何打破类加载机制的双亲委派模型<br> 预期目标：开发一个<strong>Opendaylight</strong>可用的Bundle，具体功能为获取网络拓普信息并建路</li>
<li>结合Spring技术内幕一书，研究<strong>Spring</strong>源码，并以此进一步锤炼java</li>
<li>尝试编译OpenJDK<a id="more"></a>
###论文目标</li>
<li>5号之间将论文搞定</li>
<li>15号之前完成论文翻译工作</li>
</ul>
<p>####出行</p>
<ul>
<li>争取在月内和女神实现<strong>厦门</strong>行</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 生活 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> planning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[synchronized关键字]]></title>
      <url>/2017/04/28/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>在<strong>并发编程</strong>中，多线程同时并发访问的资源叫做<strong>临界资源</strong>，当多个线程同时访问对象并要求操作相同资源时，分割了原子操作就有可能出现数据的不一致或数据不完整的情况，为避免这种情况的发生，我们会采取同步机制，以确保在某一时刻，方法内只允许有一个线程。</p>
<p>采用 synchronized 修饰符实现的同步机制叫做互斥锁机制，它所获得的锁叫做互斥锁。每个对象都有一个 monitor (锁标记)，当线程拥有这个锁标记时才能访问这个资源，没有锁标记便进入锁池。任何一个对象系统都会为其创建一个互斥锁，这个锁是为了分配给线程的，防止打断原子操作。每个对象的锁只能分配给一个线程，因此叫做互斥锁。<br><a id="more"></a><br>这里就使用同步机制获取互斥锁的情况，进行几点说明：</p>
<p>1、如果同一个方法内同时有两个或更多线程，则每个线程有自己的<strong>局部变量</strong>拷贝。</p>
<p>2、类的每个实例都有自己的对象级别锁。当一个线程访问实例对象中的 synchronized 同步代码块或同步方法时，该线程便获取了该实例的对象级别锁，其他线程这时如果要访问 synchronized 同步代码块或同步方法，便需要阻塞等待，直到前面的线程从同步代码块或方法中退出，释放掉了该对象级别锁。</p>
<p>3、访问同一个类的不同实例对象中的同步代码块，不存在阻塞等待获取对象锁的问题，因为它们获取的是各自实例的对象级别锁，相互之间没有影响。</p>
<p>4、持有一个对象级别锁不会阻止该线程被交换出来，也不会阻塞其他线程访问同一示例对象中的非 synchronized 代码。当一个线程 A 持有一个对象级别锁（即进入了 synchronized 修饰的代码块或方法中）时，线程也有可能被交换出去，此时线程 B 有可能获取执行该对象中代码的时间，但它只能执行非同步代码（没有用 synchronized 修饰），当执行到同步代码时，便会被阻塞，此时可能线程规划器又让 A 线程运行，A 线程继续持有对象级别锁，当 A 线程退出同步代码时（即释放了对象级别锁），如果 B 线程此时再运行，便会获得该对象级别锁，从而执行 synchronized 中的代码。</p>
<p>5、持有对象级别锁的线程会让其他线程阻塞在所有的 synchronized 代码外。例如，在一个类中有三个synchronized 方法 a，b，c，当线程 A 正在执行一个实例对象 M 中的方法 a 时，它便获得了该对象级别锁，那么其他的线程在执行同一实例对象（即对象 M）中的代码时，便会在所有的 synchronized 方法处阻塞，即在方法 a，b，c 处都要被阻塞，等线程 A 释放掉对象级别锁时，其他的线程才可以去执行方法 a，b 或者 c 中的代码，从而获得该对象级别锁。</p>
<p>6、使用 synchronized（obj）同步语句块，可以获取指定对象上的对象级别锁。obj 为对象的引用，如果获取了 obj 对象上的对象级别锁，在并发访问 obj 对象时时，便会在其 synchronized 代码处阻塞等待，直到获取到该 obj对象的对象级别锁。当 obj 为 this 时，便是获取当前对象的对象级别锁。</p>
<p>7、类级别锁被特定类的所有示例共享，它用于控制对 static 成员变量以及 static 方法的并发访问。具体用法与对象级别锁相似。</p>
<p>8、互斥是实现同步的一种手段，临界区、互斥量和信号量都是主要的互斥实现方式。synchronized 关键字经过编译后，会在同步块的前后分别形成 monitorenter 和 monitorexit 这两个字节码指令。根据虚拟机规范的要求，在执行 monitorenter 指令时，首先要尝试获取对象的锁，如果获得了锁，把锁的计数器加 1，相应地，在执行 monitorexit 指令时会将锁计数器减 1，当计数器为 0 时，锁便被释放了。由于 synchronized 同步块对同一个线程是可重入的，因此一个线程可以多次获得同一个对象的互斥锁，同样，要释放相应次数的该互斥锁，才能最终释放掉该锁。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
